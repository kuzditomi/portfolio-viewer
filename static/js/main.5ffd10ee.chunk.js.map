{"version":3,"sources":["filters/filters.models.ts","Header.component.tsx","AppTheme.component.tsx","portfolio/portfolio.selector.ts","portfolio/PortfolioSummary.component.tsx","portfolio/PortfolioSummary.container.ts","filters/Filter.component.tsx","filters/RadioFilter.component.tsx","filters/filters.selectors.ts","filters/filters.actions.ts","import/import.actions.ts","portfolio/portfolio.actions.ts","portfolio/portfolio.reducer.ts","filters/filters.reducer.ts","import/importHistory.reducer.ts","store.ts","calculations/TradesCompare.service.ts","filters/filter.service.ts","models.ts","filters/filters.actioncreators.ts","filters/DateFilter.container.tsx","filters/PositionFilter.container.tsx","filters/Filters.component.tsx","import/ImportHistory.component.tsx","import/ImportHistory.service.ts","import/Parser/ParserBase.service.ts","import/Parser/FlexQueryParser.service.ts","import/import.actioncreators.ts","import/import.selectors.ts","import/ImportHistory.container.ts","import/FileUpload.component.tsx","import/Import.component.tsx","import/Import.container.ts","portfolio/models.ts","portfolio/table/TradeHeader.component.tsx","portfolio/table/PriceColumn.component.tsx","portfolio/table/PLColumn.component.tsx","portfolio/table/TradeRow.component.tsx","portfolio/table/TradeGroupRow.component.tsx","portfolio/table/PortfolioTable.component.tsx","Main.component.tsx","Main.container.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["DateFilter","PositionFilter","HeaderComponent","AppBar","position","Toolbar","Typography","component","variant","color","noWrap","defaultTheme","createMuiTheme","AppThemeComponent","children","ThemeProvider","theme","filteredPortfolioSelector","state","portfolio","filteredPortfolio","filteredPortfolioSummary","TotalPL","tradeGroups","reduce","totalSum","tradeGroup","trades","tradeGroupSum","trade","tradePrice","styles","createStyles","win","green","loss","red","withStyles","summary","classes","undefined","gutterBottom","Table","TableBody","TableRow","TableCell","align","className","toFixed","connect","PortfolioSummaryComponent","Filter","label","FormControl","FormLabel","RadioFilter","prefix","options","selectedValue","onSelected","props","RadioGroup","aria-label","name","value","onChange","event","target","Object","keys","map","key","FormControlLabel","control","Radio","FILTERS_ACTIONS","dateFilterSelector","filters","dateFilter","positionFilterSelector","positionFilter","IMPORT_ACTIONS","PORTFOLIO_ACTIONS","initialState","All","history","rootReducer","combineReducers","action","type","REPORT_LOADED_FROM_HISTORY","payload","PORTFOLIO_FILTERED","importHistory","HISTORY_LOADED","DATE_FILTER_SELECTED","POSITION_FILTER_SELECTED","createStore","composeWithDevTools","TradesCompareService","isClosingCombinationWith","otherTrade","optionType","strikePrice","OptionType","filterByDate","filter","dispatch","applyFilters","filterByPosition","filterService","dateFilters","Expired","expiration","Date","Open","positionFilters","Closed","filteredTrades","find","tg","length","reportToFilter","this","report","store","getState","filtersState","dateOptions","positionOptions","Filters","Grid","container","spacing","item","xs","delete","importFromHistory","loadHistory","deleteFromHistory","useEffect","List","ListItem","button","onClick","ListItemIcon","ListItemText","primary","IconButton","stopPropagation","ImportHistoryService","savedReports","localStorage","getItem","JSON","parse","rawImports","serializedHistory","stringify","setItem","getSavedHistory","raw","dateAsKey","getUTCMilliseconds","toString","saveHistory","Error","ParserBase","rawImport","file","resolve","reject","result","Promise","_resolve","_reject","console","debug","reader","FileReader","onload","rawCsv","readAsBinaryString","mapByUnderlyingAndExpiration","underlying","toLocaleDateString","pl","push","values","sort","a","b","group","tradeDate","rawText","myTrades","ParseMyTrades","getGroupsFromTrades","FlexQueryParserService","xmlDoc","DOMParser","parseFromString","Array","from","getElementsByTagName","tradeElement","expiry","getAttribute","parseInt","substr","Put","Call","importHistoryService","reportParserService","loadReport","reportKey","GetRawImport","reportLoadedFromHistoryAction","ParseRawData","historyLoadedAction","GetRawImportKeys","importHistorySelector","DeleteReport","ImportHistory","input","display","upload","useState","setFile","id","e","files","TextField","placeholder","htmlFor","Button","alert","Import","importFile","xhr","XMLHttpRequest","open","responseType","response","send","onImportExample","Parse","SaveRawImport","columns","columnTitles","price","remainingDays","TradeHeader","TableHead","column","badge","borderRadius","padding","marginRight","background","clsx","getPLString","cell","node","columnDisplayers","TradeRow","child","empty","_tradeGroup","expand","transform","transition","transitions","create","duration","shortest","expandOpen","groupRow","grey","isOpen","setIsOpen","sum","date","now","Math","floor","Number","getRemainingDays","i","PortfolioTableComponent","size","root","appBarSpacer","mixins","toolbar","content","flexGrow","height","overflow","paddingTop","paddingBottom","paper","flexDirection","Container","maxWidth","md","Paper","MainComponent","App","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5ffd10ee.chunk.js","sourcesContent":["\nexport enum DateFilter {\n  All = 1,\n  Expired = 2,\n  Open = 3\n}\n\nexport enum PositionFilter {\n  All = 1,\n  Closed = 2,\n  Open = 3\n}","import React from \"react\";\nimport { AppBar, Toolbar, Typography } from \"@material-ui/core\";\n\nconst HeaderComponent: React.FC = () => (\n  <AppBar position=\"absolute\">\n    <Toolbar>\n      <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap>\n        IBKR portfolio viewer\n      </Typography>\n    </Toolbar>\n  </AppBar>\n);\n\nexport default HeaderComponent;\n","import React from \"react\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { createMuiTheme } from \"@material-ui/core\";\n\nconst defaultTheme = createMuiTheme();\n\nconst AppThemeComponent: React.FC = ({children}) => (\n  <ThemeProvider theme={defaultTheme}>\n    {children}\n  </ThemeProvider>\n);\n\nexport default AppThemeComponent;\n","import { AppState } from '../store';\n\nexport const originalPortfolioSelector = (state: AppState) => state.portfolio.portfolio;\nexport const filteredPortfolioSelector = (state: AppState) => state.portfolio.filteredPortfolio;\nexport const filteredPortfolioSummary = (state: AppState) => {\n    if (!state.portfolio.filteredPortfolio) {\n        return undefined;\n    }\n\n    const totalPL = state.portfolio.filteredPortfolio.tradeGroups.reduce((totalSum, tradeGroup) =>\n        totalSum + tradeGroup.trades.reduce((tradeGroupSum, trade) => tradeGroupSum + trade.tradePrice, 0)\n        , 0);\n\n    return {\n        TotalPL: -totalPL\n    }\n};","import React from \"react\";\nimport { PortfolioSummary } from \"./models\";\nimport {\n  Typography,\n  Table,\n  TableBody,\n  TableRow,\n  TableCell\n} from \"@material-ui/core\";\nimport green from \"@material-ui/core/colors/green\";\nimport red from \"@material-ui/core/colors/red\";\nimport { createStyles, WithStyles, withStyles } from \"@material-ui/styles\";\n\nconst styles = createStyles({\n  win: {\n    color: green[700]\n  },\n  loss: {\n    color: red[700]\n  }\n});\n\nexport interface PortfolioSummaryStateProps {\n  summary?: PortfolioSummary;\n}\n\nconst PortfolioSummaryComponent: React.FC<PortfolioSummaryStateProps &\n  WithStyles<typeof styles>> = ({ summary, classes }) => {\n  if (summary === undefined) {\n    return null;\n  }\n\n  return (\n    <>\n      <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n        Summary\n      </Typography>\n      <Table>\n        <TableBody>\n          <TableRow>\n            <TableCell> Total P/L:</TableCell>\n            <TableCell\n              align=\"right\"\n              className={summary.TotalPL < 0 ? classes.loss : classes.win}\n            >\n              ${(summary.TotalPL * 100).toFixed(2)}\n            </TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nexport default withStyles(styles)(PortfolioSummaryComponent);\n","import { connect } from \"react-redux\";\nimport { AppState } from \"../store\";\nimport { filteredPortfolioSummary } from './portfolio.selector';\nimport PortfolioSummaryComponent, { PortfolioSummaryStateProps } from './PortfolioSummary.component';\n\nconst mapStateToProps = (state: AppState): PortfolioSummaryStateProps => ({\n    summary: filteredPortfolioSummary(state)\n})\n\nexport default connect<PortfolioSummaryStateProps, {}, {}, AppState>(\n    mapStateToProps\n)(PortfolioSummaryComponent);","import React from \"react\";\nimport { FormControl, FormLabel } from \"@material-ui/core\";\n\nexport interface FilterProps {\n  label: string;\n}\n\nconst Filter: React.FC<FilterProps> = ({ label, children }) => {\n  return (\n    <FormControl component=\"fieldset\">\n      <FormLabel component=\"legend\">{label}</FormLabel>\n      {children}\n    </FormControl>\n  );\n};\n\nexport default Filter;\n","import React from \"react\";\nimport Filter, { FilterProps } from \"./Filter.component\";\nimport { RadioGroup, FormControlLabel, Radio } from \"@material-ui/core\";\n\nexport interface RadioFilterProps extends FilterProps {\n  prefix: string;\n  options: {\n    [key: string]: number;\n  };\n}\n\nexport interface RadioFilterStateProps {\n  selectedValue: number;\n}\n\nexport interface RadioFilterDispatchProps {\n  onSelected(value: number): void;\n}\n\nconst RadioFilter: React.FC<RadioFilterProps &\n  RadioFilterStateProps &\n  RadioFilterDispatchProps> = ({\n  prefix,\n  options,\n  selectedValue,\n  onSelected,\n  ...props\n}) => {\n  return (\n    <Filter {...props}>\n      <RadioGroup\n        aria-label=\"gender\"\n        name=\"gender1\"\n        value={selectedValue}\n        onChange={event => onSelected(+event.target.value)}\n      >\n        {Object.keys(options).map(key => (\n          <FormControlLabel\n            key={key}\n            value={options[key]}\n            control={<Radio />}\n            label={key}\n          />\n        ))}\n      </RadioGroup>\n    </Filter>\n  );\n};\n\nexport default RadioFilter;\n","import { AppState } from '../store';\n\nexport const dateFilterSelector = (state: AppState) => state.filters.dateFilter;\n\nexport const positionFilterSelector = (state: AppState) => state.filters.positionFilter;\n","import { AppAction } from '../actions';\nimport { DateFilter, PositionFilter } from './filters.models';\n\nexport enum FILTERS_ACTIONS {\n    DATE_FILTER_SELECTED = \"FILTERS/DATE_FILTER_SELECTED\",\n    POSITION_FILTER_SELECTED = \"FILTERS/POSITION_FILTER_SELECTED\",\n}\n\nexport const dateFilterSelectedAction: AppAction<FILTERS_ACTIONS.DATE_FILTER_SELECTED, DateFilter> = (payload) => ({\n    type: FILTERS_ACTIONS.DATE_FILTER_SELECTED,\n    payload\n});\n\nexport const positionFilterSelectedAction: AppAction<FILTERS_ACTIONS.POSITION_FILTER_SELECTED, PositionFilter> = (payload) => ({\n    type: FILTERS_ACTIONS.POSITION_FILTER_SELECTED,\n    payload\n});\n\nexport type FILTERS_ACTION_TYPES = ReturnType<typeof dateFilterSelectedAction> | ReturnType<typeof positionFilterSelectedAction>;","import { Report } from \"../models\";\nimport { AppAction } from '../actions';\n\nexport enum IMPORT_ACTIONS {\n    HISTORY_LOADED = \"IMPORT/HISTORY_LOADED\",\n    REPORT_LOADED_FROM_HISTORY = \"IMPORT/REPORT_LOADED_FROM_HISTORY\",\n}\n\nexport const historyLoadedAction: AppAction<IMPORT_ACTIONS.HISTORY_LOADED, string[]> = (history) => ({\n    type: IMPORT_ACTIONS.HISTORY_LOADED,\n    payload: history\n});\n\nexport const reportLoadedFromHistoryAction: AppAction<IMPORT_ACTIONS.REPORT_LOADED_FROM_HISTORY, Report> = (report) => ({\n    type: IMPORT_ACTIONS.REPORT_LOADED_FROM_HISTORY,\n    payload: report\n});\n\nexport type IMPORT_ACTION_TYPES = ReturnType<typeof historyLoadedAction> | ReturnType<typeof reportLoadedFromHistoryAction>;","import { AppAction } from '../actions';\nimport { Report } from '../models';\n\nexport enum PORTFOLIO_ACTIONS {\n    PORTFOLIO_FILTERED\n}\n\nexport const portfolioFilteredAction: AppAction<PORTFOLIO_ACTIONS.PORTFOLIO_FILTERED, Report> = (payload) => ({\n    type: PORTFOLIO_ACTIONS.PORTFOLIO_FILTERED,\n    payload\n});\n\nexport type PORTFOLIO_ACTION_TYPES = ReturnType<typeof portfolioFilteredAction>;","import { Report } from '../models';\nimport { AppActionTypes } from '../actions';\nimport { IMPORT_ACTIONS } from '../import/import.actions';\nimport { PORTFOLIO_ACTIONS } from './portfolio.actions';\n\ninterface PortfolioState {\n    portfolio?: Report;\n    filteredPortfolio?: Report;\n}\n\nconst initialState: PortfolioState = {\n    portfolio: undefined,\n    filteredPortfolio: undefined\n};\n\nexport default function (state = initialState, action: AppActionTypes): PortfolioState {\n    switch (action.type) {\n        case IMPORT_ACTIONS.REPORT_LOADED_FROM_HISTORY: {\n            return {\n                portfolio: action.payload,\n                filteredPortfolio: action.payload\n            };\n        }\n        case PORTFOLIO_ACTIONS.PORTFOLIO_FILTERED: {\n            return {\n                ...state,\n                filteredPortfolio: action.payload\n            }\n        }\n        default:\n            return state;\n    }\n}\n","import { AppActionTypes } from '../actions';\nimport { DateFilter, PositionFilter } from './filters.models';\nimport { FILTERS_ACTIONS } from './filters.actions';\nimport { IMPORT_ACTIONS } from '../import/import.actions';\n\nexport interface FiltersState {\n    dateFilter: DateFilter,\n    positionFilter: PositionFilter\n}\n\nconst initialState: FiltersState = {\n    dateFilter: DateFilter.All,\n    positionFilter: PositionFilter.All\n};\n\nexport default function (state = initialState, action: AppActionTypes): FiltersState {\n    switch (action.type) {\n        case FILTERS_ACTIONS.DATE_FILTER_SELECTED: {\n            return {\n                ...state,\n                dateFilter: action.payload\n            }\n        }\n        case FILTERS_ACTIONS.POSITION_FILTER_SELECTED: {\n            return {\n                ...state,\n                positionFilter: action.payload\n            }\n        }\n        case IMPORT_ACTIONS.REPORT_LOADED_FROM_HISTORY:{\n            return initialState;\n        }\n        default:\n            return state;\n    }\n}\n","import { AppActionTypes } from '../actions';\nimport { IMPORT_ACTIONS } from './import.actions';\n\ninterface ImportHistoryState {\n    history: string[]\n}\n\nconst initialState: ImportHistoryState = {\n    history: [],\n};\n\nexport default function (state = initialState, action: AppActionTypes): ImportHistoryState {\n    switch (action.type) {\n        case IMPORT_ACTIONS.HISTORY_LOADED: {\n            return {\n                ...state,\n                history: action.payload\n            }\n        }\n        default:\n            return state;\n    }\n}\n","import { createStore, combineReducers } from \"redux\";\nimport portfolio from './portfolio/portfolio.reducer';\nimport filters from './filters/filters.reducer';\nimport importHistory from './import/importHistory.reducer';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nexport const rootReducer = combineReducers({\n    portfolio,\n    importHistory,\n    filters\n});\n\nexport type AppState = ReturnType<typeof rootReducer>\n\nexport default createStore(rootReducer, composeWithDevTools());","import { Trade } from \"../models\";\n\nconst isClosingCombinationWith = (trade: Trade) => (otherTrade: Trade) =>\n    trade.optionType === otherTrade.optionType &&\n    trade.strikePrice === otherTrade.strikePrice &&\n    trade.position === (-1 * otherTrade.position);\n\nconst TradesCompareService = {\n    isClosingCombinationWith\n}\nexport default TradesCompareService;","import { Report, TradeGroup } from \"../models\";\nimport { DateFilter, PositionFilter } from './filters.models';\nimport { FiltersState } from './filters.reducer';\nimport TradesCompareService from \"../calculations/TradesCompare.service\";\n\nexport class FilterService {\n    public applyFilters(reportToFilter: Report, filters: FiltersState): Report {\n        const filtersToApply = [\n            this.filterByDate(filters.dateFilter),\n            this.filterByPosition(filters.positionFilter),\n        ];\n\n        const filteredPortfolio = filtersToApply.reduce((report, filter) => filter(report), reportToFilter)\n\n        return filteredPortfolio;\n    }\n\n    private filterByDate = (filter: DateFilter) => (portfolio: Report): Report => {\n        const dateFilters = {\n            [DateFilter.All]: () => true,\n            [DateFilter.Expired]: (tradeGroup: TradeGroup) => tradeGroup.expiration < new Date(),\n            [DateFilter.Open]: (tradeGroup: TradeGroup) => tradeGroup.expiration > new Date(),\n        }\n\n        const filteredPortfolio: Report = {\n            ...portfolio,\n            tradeGroups: portfolio.tradeGroups.filter(dateFilters[filter])\n        };\n\n        return filteredPortfolio;\n    }\n\n    private filterByPosition = (filter: PositionFilter) => (portfolio: Report): Report => {\n        const positionFilters = {\n            [PositionFilter.All]: (tradeGroup: TradeGroup) => tradeGroup,\n            [PositionFilter.Closed]: (tradeGroup: TradeGroup) => {\n                const filteredTrades = tradeGroup.trades\n                    .filter(trade => tradeGroup.trades.find(TradesCompareService.isClosingCombinationWith(trade)))\n\n                return {\n                    ...tradeGroup,\n                    trades: filteredTrades\n                }\n            },\n            [PositionFilter.Open]: (tradeGroup: TradeGroup) => {\n                const filteredTrades = tradeGroup.trades\n                    .filter(trade => !tradeGroup.trades.find(TradesCompareService.isClosingCombinationWith(trade)))\n\n                return {\n                    ...tradeGroup,\n                    trades: filteredTrades\n                }\n            }\n        }\n\n        const filteredPortfolio: Report = {\n            ...portfolio,\n            tradeGroups: portfolio.tradeGroups\n                .map(positionFilters[filter])\n                .filter(tg => tg.trades.length > 0)\n        };\n\n        return filteredPortfolio;\n    }\n}","export enum OptionType {\n    Call = 1,\n    Put = 2\n}\nexport interface Trade {\n    underlying: string;\n    position: number;\n    expiration: Date;\n    optionType: OptionType;\n    strikePrice: number;\n    tradePrice: number;\n    pl: number;\n    tradeDate: Date;\n}\n\nexport interface Report {\n    name: string;\n    tradeGroups: TradeGroup[];\n}\n\nexport interface TradeGroup {\n    underlying: string;\n    expiration: Date;\n    trades: Trade[];\n    pl: number;\n}\n","import { Dispatch } from 'redux';\nimport { DateFilter, PositionFilter } from './filters.models';\nimport { dateFilterSelectedAction, positionFilterSelectedAction } from './filters.actions';\nimport { originalPortfolioSelector } from '../portfolio/portfolio.selector';\nimport store from '../store';\nimport { portfolioFilteredAction } from '../portfolio/portfolio.actions';\nimport { FilterService } from './filter.service';\n\nexport const filterByDate = (filter: DateFilter) => (dispatch: Dispatch) => {\n    dispatch(dateFilterSelectedAction(filter));\n\n    applyFilters(dispatch);\n}\n\nexport const filterByPosition = (filter: PositionFilter) => (dispatch: Dispatch) => {\n    dispatch(positionFilterSelectedAction(filter));\n\n    applyFilters(dispatch);\n}\n\n\nconst filterService = new FilterService();\nconst applyFilters = (dispatch: Dispatch) => {\n    const portfolio = originalPortfolioSelector(store.getState());\n    \n    if (!portfolio) {\n        return;\n    }\n\n    const filtersState = store.getState().filters;\n    const filteredPortfolio = filterService.applyFilters(portfolio, filtersState);\n   \n    dispatch(portfolioFilteredAction(filteredPortfolio));\n}","import { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport RadioFilter, {\n  RadioFilterStateProps,\n  RadioFilterDispatchProps\n} from \"./RadioFilter.component\";\nimport React from \"react\";\nimport { DateFilter } from \"./filters.models\";\nimport { dateFilterSelector } from \"./filters.selectors\";\nimport { AppState } from \"../store\";\nimport { filterByDate } from \"./filters.actioncreators\";\n\nconst mapStateToProps = (state: AppState): RadioFilterStateProps => ({\n  selectedValue: dateFilterSelector(state) as number\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): RadioFilterDispatchProps => ({\n  onSelected: (value: number) => {\n    filterByDate(value as DateFilter)(dispatch);\n  }\n});\n\nconst dateOptions = {\n  All: DateFilter.All,\n  Expired: DateFilter.Expired,\n  Open: DateFilter.Open\n};\n\nconst DateFilterComponent: React.FC<\n  RadioFilterStateProps & RadioFilterDispatchProps\n> = ({ ...props }) => (\n  <RadioFilter prefix={'date'} label={\"By Date\"} options={dateOptions} {...props} />\n);\n\nexport default connect<\n  RadioFilterStateProps,\n  RadioFilterDispatchProps,\n  {},\n  AppState\n>(\n  mapStateToProps,\n  mapDispatchToProps\n)(DateFilterComponent);\n","import { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport RadioFilter, {\n  RadioFilterStateProps,\n  RadioFilterDispatchProps\n} from \"./RadioFilter.component\";\nimport React from \"react\";\nimport { PositionFilter } from \"./filters.models\";\nimport { AppState } from \"../store\";\nimport { positionFilterSelector } from \"./filters.selectors\";\nimport { filterByPosition } from \"./filters.actioncreators\";\n\nconst mapStateToProps = (state: AppState): RadioFilterStateProps => ({\n  selectedValue: positionFilterSelector(state) as number\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): RadioFilterDispatchProps => ({\n  onSelected: (value: number) => {\n    filterByPosition(value as PositionFilter)(dispatch);\n  }\n});\n\nconst positionOptions = {\n  All: PositionFilter.All,\n  Closed: PositionFilter.Closed,\n  Open: PositionFilter.Open\n};\n\nconst PositionFilterComponent: React.FC<\n  RadioFilterStateProps & RadioFilterDispatchProps\n> = ({ ...props }) => (\n  <RadioFilter\n    prefix={\"position\"}\n    label={\"By Position\"}\n    options={positionOptions}\n    {...props}\n  />\n);\n\nexport default connect<\n  RadioFilterStateProps,\n  RadioFilterDispatchProps,\n  {},\n  AppState\n>(\n  mapStateToProps,\n  mapDispatchToProps\n)(PositionFilterComponent);\n","import React from \"react\";\nimport DateFilter from \"./DateFilter.container\";\nimport PositionFilter from \"./PositionFilter.container\";\nimport \"./filters.scss\";\nimport { Grid, Typography } from \"@material-ui/core\";\n\nconst Filters: React.FC = () => {\n  return (\n    <>\n      <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n        Filters\n      </Typography>\n      <Grid container spacing={2}>\n        <Grid item xs={4}>\n          <DateFilter />\n        </Grid>\n        <Grid item xs={4}>\n          <PositionFilter />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default Filters;\n","import React, { useEffect } from \"react\";\nimport {\n  Grid,\n  Typography,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  IconButton\n} from \"@material-ui/core\";\nimport BarChartIcon from \"@material-ui/icons/BarChart\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { createStyles, WithStyles, withStyles } from \"@material-ui/styles\";\nimport red from \"@material-ui/core/colors/red\";\n\nconst styles = createStyles({\n  delete: {\n    \"&:hover\": {\n      color: red[700]\n    }\n  }\n});\n\nexport interface ImportHistoryStateProps {\n  history: string[];\n}\n\nexport interface ImportHistoryDispatchProps {\n  importFromHistory(reportKey: string): void;\n  deleteFromHistory(reportKey: string): void;\n  loadHistory(): void;\n}\n\nconst ImportHistory: React.FC<ImportHistoryStateProps &\n  ImportHistoryDispatchProps &\n  WithStyles<typeof styles>> = ({\n  history,\n  importFromHistory,\n  loadHistory,\n  deleteFromHistory,\n  classes\n}) => {\n  useEffect(() => {\n    loadHistory();\n  }, [loadHistory]);\n\n  return (\n    <Grid>\n      <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n        Imported reports\n      </Typography>\n      <List component=\"nav\" aria-label=\"Main mailbox folders\">\n        {history.map(key => (\n          <ListItem button onClick={() => importFromHistory(key)} key={key}>\n            <ListItemIcon>\n              <BarChartIcon />\n            </ListItemIcon>\n            <ListItemText primary={key} />\n            <IconButton\n              className={classes.delete}\n              onClick={event => {\n                deleteFromHistory(key);\n                event.stopPropagation();\n              }}\n            >\n              <DeleteIcon />\n            </IconButton>\n          </ListItem>\n        ))}\n      </List>\n    </Grid>\n  );\n};\n\nexport default withStyles(styles)(ImportHistory);\n","const HISTORY_KEY = \"savedImports\";\n\ninterface History {\n  rawImports: { [key: string]: string };\n}\n\nexport class ImportHistoryService {\n  private getSavedHistory(): History {\n    const savedReports = localStorage.getItem(HISTORY_KEY);\n    if (savedReports) {\n      return JSON.parse(savedReports) as History;\n    } else {\n      return {\n        rawImports: {}\n      };\n    }\n  }\n\n  private saveHistory(history: History) {\n    const serializedHistory = JSON.stringify(history);\n    localStorage.setItem(HISTORY_KEY, serializedHistory);\n  }\n\n  public GetRawImportKeys() {\n    const history = this.getSavedHistory();\n\n    return Object.keys(history.rawImports);\n  }\n\n  public GetRawImport(key: string) {\n    const history = this.getSavedHistory();\n\n    return history.rawImports[key];\n  }\n\n  public SaveRawImport(raw: string) {\n    const history = this.getSavedHistory();\n\n    const dateAsKey = new Date().getUTCMilliseconds().toString();\n    history.rawImports[dateAsKey] = raw;\n\n    this.saveHistory(history);\n  }\n\n  public DeleteReport(key: string) {\n    const history = this.getSavedHistory();\n\n    if (!history.rawImports[key]) {\n      throw Error(`Key not found in saved history: ${key}`);\n    }\n\n    delete history.rawImports[key];\n\n    this.saveHistory(history);\n  }\n}\n","import { IParser } from './IParser.service';\nimport { Report, Trade, TradeGroup } from '../../models';\n\nexport abstract class ParserBase implements IParser {\n    private rawImport: string = \"\";\n\n    public Parse(file: File): Promise<string> {\n        let resolve: (raw: string) => void;\n        let reject: (error: string) => void;\n\n        this.rawImport = \"\";\n\n        const result = new Promise<string>(\n            (_resolve: (raw: string) => void, _reject) => {\n                [resolve, reject] = [_resolve, _reject];\n            }\n        );\n\n        console.debug(`Parsing ${file.name}...`);\n\n        var reader = new FileReader();\n\n        reader.onload = () => {\n            console.debug(\"File loaded.\");\n            const rawCsv = reader.result as string;\n            this.rawImport = rawCsv;\n\n            try {\n                resolve(this.rawImport);\n            } catch {\n                this.rawImport = \"\";\n                reject(\"Error while parsing...\");\n            }\n        };\n\n        reader.readAsBinaryString(file);\n\n        return result;\n    }\n\n    protected getGroupsFromTrades(trades: Trade[]) {\n        const mapByUnderlyingAndExpiration = trades.reduce((map, trade) => {\n            const { expiration, underlying } = trade;\n            const key = `${underlying} - ${expiration.toLocaleDateString()}`;\n\n            if (!map[key]) {\n                map[key] = {\n                    underlying,\n                    expiration,\n                    trades: [],\n                    pl: 0\n                };\n            }\n\n            map[key].trades.push(trade);\n\n            return map;\n        }, {} as { [key: string]: TradeGroup })\n\n        return Object.values(mapByUnderlyingAndExpiration)\n            .sort((a, b) => +a.expiration - +b.expiration)\n            .map(group => { group.trades.sort((a,b) => +a.tradeDate - +b.tradeDate); return group; });\n    }\n\n    public ParseRawData(rawText: string): Report {\n        const myTrades = this.ParseMyTrades(rawText);\n\n        const tradeGroups = this.getGroupsFromTrades(myTrades);\n\n        return {\n            name: \"ok\",\n            tradeGroups,\n        };\n    }\n\n    protected abstract ParseMyTrades(rawText: string): Trade[];\n}","import { ParserBase } from './ParserBase.service';\nimport { Trade, OptionType } from '../../models';\n\nexport class FlexQueryParserService extends ParserBase {\n    protected ParseMyTrades(rawText: string): Trade[] {\n        const parser = new DOMParser();\n        const xmlDoc = parser.parseFromString(rawText, \"text/xml\");\n\n        const trades: Trade[] = Array.from(xmlDoc.getElementsByTagName('Trade')).map(tradeElement => {\n            const expiry = tradeElement.getAttribute('expiry')!;\n            const tradeDate = tradeElement.getAttribute('tradeDate')!;\n            const position = parseInt(tradeElement.getAttribute('quantity')!);\n\n            const trade: Trade = {\n                underlying: tradeElement.getAttribute('underlyingSymbol')!,\n                position,\n                expiration: new Date(+expiry.substr(0, 4), +expiry.substr(4, 2) - 1, +expiry.substr(6, 2)),\n                optionType: tradeElement.getAttribute('putCall') === 'P' ? OptionType.Put : OptionType.Call,\n                strikePrice: +tradeElement.getAttribute('strike')!,\n                pl: 0,\n                tradePrice: (position < 0 ? -1 : 1) * (+tradeElement.getAttribute('tradePrice')!),\n                tradeDate: new Date(+tradeDate.substr(0, 4), +tradeDate.substr(4, 2) - 1, +tradeDate.substr(6, 2)),\n            }\n\n            return trade;\n        });\n\n        return trades;\n    }\n}","import { Dispatch } from \"redux\";\nimport { ImportHistoryService } from './ImportHistory.service';\nimport { reportLoadedFromHistoryAction, historyLoadedAction } from './import.actions';\nimport { IParser } from './Parser/IParser.service';\nimport { FlexQueryParserService } from './Parser/FlexQueryParser.service';\n\nconst importHistoryService = new ImportHistoryService();\nconst reportParserService: IParser = new FlexQueryParserService();\n\nexport const loadReport = (reportKey: string) => (dispatch: Dispatch) => {\n    const rawImport = importHistoryService.GetRawImport(reportKey);\n    const report = reportParserService.ParseRawData(rawImport);\n\n    return dispatch(reportLoadedFromHistoryAction(report));\n}\n\nexport const deleteReport = (reportKey: string) => (dispatch: Dispatch) => {\n    importHistoryService.DeleteReport(reportKey);\n\n    return loadHistory()(dispatch);\n}\n\nexport const loadHistory = () => (dispatch: Dispatch) => {\n    const history = importHistoryService.GetRawImportKeys();\n\n    return dispatch(historyLoadedAction(history));\n}\n\nexport const importFile = (file: File) => async (dispatch: Dispatch) => {\n    const rawImport = await reportParserService.Parse(file);\n    importHistoryService.SaveRawImport(rawImport);\n    loadHistory()(dispatch);\n}","import { AppState } from '../store';\n\nexport const importHistorySelector = (state: AppState) => state.importHistory.history;","import { connect } from \"react-redux\";\nimport { AppState } from \"../store\";\nimport ImportHistory, { ImportHistoryDispatchProps, ImportHistoryStateProps } from './ImportHistory.component';\nimport { Dispatch } from 'redux';\nimport { loadReport, loadHistory, deleteReport } from './import.actioncreators';\nimport { importHistorySelector } from \"./import.selectors\";\n\nconst mapStateToProps = (state: AppState): ImportHistoryStateProps => ({\n  history: importHistorySelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): ImportHistoryDispatchProps => ({\n  importFromHistory: (key: string) => { loadReport(key)(dispatch) },\n  deleteFromHistory: (key: string) => { deleteReport(key)(dispatch) },\n  loadHistory: ()=> loadHistory()(dispatch)\n})\n\nexport default connect<ImportHistoryStateProps, ImportHistoryDispatchProps, \n{}, AppState>(\n  mapStateToProps, mapDispatchToProps\n)(ImportHistory);","import React, { useState } from \"react\";\nimport {\n  Button,\n  WithStyles,\n  createStyles,\n  withStyles,\n  TextField\n} from \"@material-ui/core\";\n\nconst styles = () =>\n  createStyles({\n    input: {\n      display: \"none\"\n    }\n  });\n\nexport interface FileUploadProps {\n  upload(file: File): void;\n}\n\nconst FileUploadComponent: React.FC<FileUploadProps &\n  WithStyles<typeof styles>> = ({ upload, classes }) => {\n  const [file, setFile] = useState<FileList | null>();\n\n  const onImport = () => {\n    if (!file || file.length !== 1) {\n      alert(\"please provide a single file!\");\n      return;\n    }\n\n    upload(file[0]);\n  };\n\n  return (\n    <>\n      <input\n        className={classes.input}\n        id=\"raised-button-file\"\n        type=\"file\"\n        onChange={e => setFile(e.target.files)}\n      />\n      <TextField\n        value={file && file.length ? file[0].name : undefined}\n        placeholder=\"No file chosen\"\n      />\n\n      <label htmlFor=\"raised-button-file\">\n        <Button component=\"span\">Select file</Button>\n      </label>\n      {file && file.length ? (\n        <Button onClick={() => onImport()} color=\"primary\" variant=\"contained\">\n          Import\n        </Button>\n      ) : null}\n    </>\n  );\n};\n\nexport default withStyles(styles)(FileUploadComponent);\n","import React from \"react\";\nimport { Grid, Typography, Button } from \"@material-ui/core\";\nimport FileUploadComponent from \"./FileUpload.component\";\n\nexport interface ImportDispatchProps {\n  importFile(file: File): void;\n}\n\nconst Import: React.FC<ImportDispatchProps> = ({ importFile }) => {\n  const onImportExample = () => {\n    const exampleFileUrl = \"example.xml\";\n\n    let xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", exampleFileUrl);\n    xhr.responseType = \"blob\";\n    xhr.onload = function() {\n      importFile(xhr.response);\n    };\n    xhr.send();\n  };\n\n  return (\n    <>\n      <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n        Import flex query\n      </Typography>\n      <Grid container spacing={1}>\n        <Grid item xs={12}>\n          <FileUploadComponent upload={importFile} />\n        </Grid>\n        <Grid item xs={12}>\n          If you have no flex queries exported yet:&nbsp;\n          <Button\n            onClick={() => onImportExample()}\n            color=\"primary\"\n            variant=\"contained\"\n          >\n            Load example\n          </Button>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default Import;\n","import { connect } from \"react-redux\";\nimport { AppState } from \"../store\";\nimport { Dispatch } from 'redux';\nimport Import, { ImportDispatchProps } from './Import.component';\nimport { importFile } from \"./import.actioncreators\";\n\nconst mapDispatchToProps = (dispatch: Dispatch): ImportDispatchProps => ({\n  importFile: (file) => importFile(file)(dispatch)\n})\n\nexport default connect<{}, ImportDispatchProps, {}, AppState>(\n  null, mapDispatchToProps\n)(Import);\n","export const columns = [\n  'action',\n  'underlying',\n  'optionType',\n  'strikePrice',\n  'position',\n  'price',\n  'pl',\n  'tradeDate',\n  'expiration',\n  'remainingDays'\n] as const;\n\nexport type columns = typeof columns[number]; // Thanks typescript 3.4 !!!\n\nexport interface PortfolioSummary {\n  TotalPL: number;\n}","import React from \"react\";\nimport { columns } from \"../models\";\nimport { TableHead, TableCell, TableRow } from \"@material-ui/core\";\n\nconst columnTitles: { [key in columns]: string } = {\n  action: \"\",\n  underlying: \"Underlying\",\n  strikePrice: \"Strike Price\",\n  optionType: \"Option Type\",\n  position: \"Position\",\n  expiration: \"Expiration\",\n  price: \"Trade Price\",\n  pl: \"P/L\",\n  tradeDate: \"Trade date\",\n  remainingDays: \"Remaining days\"\n};\n\nconst TradeHeader: React.FC = () => {\n  return (\n    <TableHead>\n      <TableRow>\n        {columns.map(column => (\n          <TableCell key={column}>{columnTitles[column]}</TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n};\n\nexport default TradeHeader;\n","import React from \"react\";\nimport {\n  TableCell,\n  createStyles,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport { green, red } from \"@material-ui/core/colors\";\nimport clsx from 'clsx';\n\nconst colorDepth = 700;\nconst styles = createStyles({\n  badge: {\n    borderRadius: 3,\n    padding: '2px 5px',\n    marginRight: 5\n  },\n  win: {\n    background: green[colorDepth],\n    color: \"white\"\n  },\n  loss: {\n    background: red[colorDepth],\n    color: \"white\"\n  }\n});\n\nexport interface PriceColumnProps {\n  price: number;\n}\n\nconst PriceColumn: React.FC<PriceColumnProps & WithStyles<typeof styles>> = ({\n  price,\n  classes\n}) => {\n  return (\n    <TableCell>\n      <span className={clsx(classes.badge, price > 0 ? classes.loss : classes.win)}>\n        {price < 0 ? \"C\" : \"D\"}\n      </span>\n      <span>{price < 0 ? (price * -1).toFixed(2) : price.toFixed(2)}</span>\n    </TableCell>\n  );\n};\n\nexport default withStyles(styles)(PriceColumn);\n","import React from \"react\";\nimport {\n  TableCell,\n  createStyles,\n  WithStyles,\n  withStyles\n} from \"@material-ui/core\";\nimport { green, red } from \"@material-ui/core/colors\";\n\nconst colorDepth = 700;\nconst styles = createStyles({\n  win: {\n    background: green[colorDepth],\n    color: \"white\"\n  },\n  loss: {\n    background: red[colorDepth],\n    color: \"white\"\n  }\n});\n\nexport interface PLColumnProps {\n  pl: number;\n}\n\nconst getPLString = (pl: number) => {\n  return pl < 0 ? (pl * -1).toFixed(2) : pl.toFixed(2);\n};\n\nconst PLColumn: React.FC<PLColumnProps & WithStyles<typeof styles>> = ({\n  pl,\n  classes\n}) => {\n  return (\n    <TableCell className={pl > 0 ? classes.loss : classes.win}>\n      {getPLString(pl)}\n    </TableCell>\n  );\n};\n\nexport default withStyles(styles)(PLColumn);\n","import { OptionType, Trade } from \"../../models\";\nimport React from \"react\";\nimport { columns } from \"../models\";\nimport PriceColumn from \"./PriceColumn.component\";\nimport PLColumn from \"./PLColumn.component\";\nimport { TableRow, TableCell } from '@material-ui/core';\n\nexport interface TradeRowProps {\n  trade: Trade;\n}\n\nconst cell = (key: string, node: React.ReactNode) => (\n  <TableCell className={key} key={key}>\n    {node}\n  </TableCell>\n);\n\nconst columnDisplayers: {\n  [key in columns]: (trade: Trade) => React.ReactNode;\n} = {\n  action: () => cell(\"action\", \"\"),\n  underlying: trade => cell(\"underlying\", trade.underlying),\n  optionType: trade =>\n    cell(\n      \"optionType\",\n      trade.optionType === OptionType.Call ? \"CALL\" : \"PUT\"\n    ),\n  strikePrice: trade =>\n    cell(\"strikePrice\", trade.strikePrice.toFixed(1)),\n  position: trade => cell(\"position\", trade.position.toString()),\n  pl: trade => <PLColumn key={\"pl\"} pl={trade.pl} />,\n  tradeDate: trade => cell('tradeDate', trade.tradeDate.toLocaleDateString()),\n  expiration: trade =>\n    cell(\"expiration\", trade.expiration.toLocaleDateString()),\n  price: trade => <PriceColumn key={\"price\"} price={trade.tradePrice} />,\n  remainingDays: () => cell(\"remainingDays\", \"\")\n};\n\nconst TradeRow: React.FC<TradeRowProps> = ({ trade }) => {\n  return <TableRow>{columns.map(column => columnDisplayers[column](trade))}</TableRow>;\n};\n\nexport default TradeRow;\n","import { TradeGroup } from \"../../models\";\nimport React, { useState } from \"react\";\nimport { columns } from \"../models\";\nimport TradeRow from \"./TradeRow.component\";\nimport PriceColumn from \"./PriceColumn.component\";\nimport { TableRow, TableCell, IconButton, Theme } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { withStyles, createStyles, WithStyles } from \"@material-ui/styles\";\nimport clsx from 'clsx';\nimport { grey } from \"@material-ui/core/colors\";\nimport PLColumn from \"./PLColumn.component\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    expand: {\n      padding: 0,\n      transform: \"rotate(0deg)\",\n      transition: theme.transitions.create(\"transform\", {\n        duration: theme.transitions.duration.shortest\n      })\n    },\n    expandOpen: {\n      transform: \"rotate(180deg)\"\n    },\n    groupRow: {\n      background: grey[300]\n    }\n  });\n\nexport interface TradeGroupRowProps {\n  tradeGroup: TradeGroup;\n}\n\ninterface CollapseableTradeGroup extends TradeGroup {\n  isOpen: boolean;\n}\n\nconst getRemainingDays = (date: Date): string => {\n  const now = new Date();\n\n  const remainingDays = Math.floor(\n    (Number(date) - Number(now)) / 1000 / 60 / 60 / 24\n  );\n\n  return remainingDays < 0 ? \"EXPIRED\" : remainingDays.toString();\n};\n\nconst cell = (key: string, child: React.ReactNode) => (\n  <TableCell key={key} className={key}>\n    {child}\n  </TableCell>\n);\nconst empty = (key: string) => (_tradeGroup: TradeGroup) => cell(key, \"\");\n\nconst TradeGroupRow: React.FC<TradeGroupRowProps &\n  WithStyles<typeof styles>> = ({ tradeGroup, classes }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggleIsOpen = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const columnDisplayers: {\n    [key in columns]: (tradeGroup: CollapseableTradeGroup) => React.ReactNode;\n  } = {\n    action: tradeGroup =>\n      cell(\n        \"action\",\n        <IconButton\n          aria-label=\"share\"\n          onClick={() => toggleIsOpen()}\n          className={clsx(classes.expand, {\n            [classes.expandOpen]: tradeGroup.isOpen\n          })}\n        >\n          <ExpandMoreIcon />\n        </IconButton>\n      ),\n    underlying: tradeGroup => cell(\"underlying\", tradeGroup.underlying),\n    optionType: empty(\"optionType\"),\n    strikePrice: empty(\"strikePrice\"),\n    position: empty(\"position\"),\n    price: tradeGroup => (\n      <PriceColumn\n        key={\"price\"}\n        price={tradeGroup.trades.reduce(\n          (sum, trade) => (sum += trade.tradePrice),\n          0\n        )}\n      />\n    ),\n    pl: tradeGroup => (\n      <PLColumn\n        key={\"pl\"}\n        pl={tradeGroup.trades.reduce(\n          (sum, trade) => (sum += trade.pl),\n          0\n        )}\n      />\n    ),\n    tradeDate: empty('tradeDate'),\n    expiration: tradeGroup =>\n      cell(\"expiration\", tradeGroup.expiration.toLocaleDateString()),\n    remainingDays: tradeGroup =>\n      cell(\"remainingDays\", getRemainingDays(tradeGroup.expiration))\n  };\n\n  const group: CollapseableTradeGroup = { ...tradeGroup, isOpen };\n\n  return (\n    <>\n      <TableRow className={classes.groupRow}>\n        {columns.map(column => columnDisplayers[column](group))}\n      </TableRow>\n      {isOpen\n        ? tradeGroup.trades.map((trade, i) => (\n            <TradeRow trade={trade} key={i} />\n          ))\n        : null}\n    </>\n  );\n};\n\nexport default withStyles(styles)(TradeGroupRow);\n","import React from \"react\";\nimport { Report } from \"../../models\";\nimport TradeHeader from \"./TradeHeader.component\";\nimport TradeGroupRow from \"./TradeGroupRow.component\";\nimport { Table, TableBody } from \"@material-ui/core\";\n\nexport interface PortfolioTableProps {\n  report: Report;\n}\n\nconst PortfolioTableComponent: React.FC<PortfolioTableProps> = ({ report }) => (\n  <Table size=\"small\">\n    <TradeHeader />\n    <TableBody>\n      {report.tradeGroups.map((group, i) => (\n        <TradeGroupRow tradeGroup={group} key={i} />\n      ))}\n    </TableBody>\n  </Table>\n);\n\nexport default PortfolioTableComponent;\n","import React from \"react\";\nimport { withStyles, createStyles, WithStyles } from \"@material-ui/styles\";\nimport { Theme, Container, Grid, Paper } from \"@material-ui/core\";\nimport PortfolioSummary from \"./portfolio/PortfolioSummary.container\";\nimport Filters from \"./filters/Filters.component\";\nimport ImportHistory from \"./import/ImportHistory.container\";\nimport Import from \"./import/Import.container\";\nimport { Report } from \"./models\";\nimport PortfolioTableComponent from \"./portfolio/table/PortfolioTable.component\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\"\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n      flexGrow: 1,\n      height: \"100vh\",\n      overflow: \"auto\"\n    },\n    container: {\n      paddingTop: theme.spacing(4),\n      paddingBottom: theme.spacing(4)\n    },\n    paper: {\n      padding: theme.spacing(2),\n      display: \"flex\",\n      overflow: \"auto\",\n      flexDirection: \"column\"\n    }\n  });\n\nexport interface MainStateProps {\n  report?: Report;\n}\n\nconst MainComponent: React.FC<MainStateProps & WithStyles<typeof styles>> = ({\n  report,\n  classes\n}) => {\n  const renderPortfolio = () => {\n    if (!report) {\n      return null;\n    }\n\n    return (\n      <>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={4}>\n                <PortfolioSummary />\n              </Grid>\n              <Grid item xs={12} md={4}>\n                <Filters />\n              </Grid>\n            </Grid>\n          </Paper>\n        </Grid>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n            <PortfolioTableComponent report={report} />\n          </Paper>\n        </Grid>\n      </>\n    );\n  };\n  return (\n    <main className={classes.content}>\n      <div className={classes.appBarSpacer} />\n      <Container maxWidth=\"lg\" className={classes.container}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <Paper className={classes.paper}>\n              <ImportHistory />\n            </Paper>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Paper className={classes.paper}>\n              <Import />\n            </Paper>\n          </Grid>\n          {renderPortfolio()}\n        </Grid>\n      </Container>\n    </main>\n  );\n};\n\nexport default withStyles(styles)(MainComponent);\n","import { connect } from \"react-redux\";\nimport { AppState } from \"./store\";\nimport { filteredPortfolioSelector } from './portfolio/portfolio.selector';\nimport MainComponent, {MainStateProps} from \"./Main.component\";\n\nconst mapStateToProps = (state: AppState): MainStateProps => ({\n    report: filteredPortfolioSelector(state)\n})\n\nexport default connect<MainStateProps, {}, {}, AppState>(\n    mapStateToProps\n)(MainComponent);","import React from \"react\";\nimport \"./App.scss\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport HeaderComponent from \"./Header.component\";\nimport AppThemeComponent from \"./AppTheme.component\";\nimport Main from \"./Main.container\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\nconst App: React.FC = () => (\n  <AppThemeComponent>\n    <Provider store={store}>\n      <div className=\"app\">\n        <CssBaseline />\n        <HeaderComponent />\n        <Main />\n      </div>\n    </Provider>\n  </AppThemeComponent>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
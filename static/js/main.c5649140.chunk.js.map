{"version":3,"sources":["filters/filters.models.ts","Header.component.tsx","AppTheme.component.tsx","filters/Filter.component.tsx","filters/RadioFilter.component.tsx","filters/filters.selectors.ts","filters/filters.actions.ts","import/import.actions.ts","portfolio/portfolio.selector.ts","portfolio/portfolio.actions.ts","portfolio/portfolio.reducer.ts","filters/filters.reducer.ts","import/importHistory.reducer.ts","store.ts","filters/filter.service.ts","models.ts","filters/filters.actioncreators.ts","filters/DateFilter.container.tsx","filters/PositionFilter.container.tsx","filters/Filters.component.tsx","portfolio/PortfolioSummary.component.tsx","portfolio/PortfolioSummary.container.ts","portfolio/models.ts","portfolio/TradeHeader.component.tsx","portfolio/PriceColumn.component.tsx","portfolio/TradeRow.component.tsx","portfolio/TradeGroupRow.component.tsx","portfolio/PortfolioTable.component.tsx","portfolio/Portfolio.component.tsx","portfolio/Portfolio.container.ts","import/ImportHistory.component.tsx","import/ImportHistory.service.ts","import/Parser/FlexQueryParser.service.ts","import/Parser/ParserBase.service.ts","import/import.actioncreators.ts","import/import.selectors.ts","import/ImportHistory.container.ts","import/FileUpload.component.tsx","import/Import.component.tsx","import/Import.container.ts","Main.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DateFilter","PositionFilter","HeaderComponent","AppBar","position","Toolbar","Typography","component","variant","color","noWrap","defaultTheme","createMuiTheme","AppThemeComponent","children","ThemeProvider","theme","Filter","label","FormControl","FormLabel","RadioFilter","prefix","options","selectedValue","onSelected","props","RadioGroup","aria-label","name","value","onChange","event","target","Object","keys","map","key","FormControlLabel","control","Radio","FILTERS_ACTIONS","dateFilterSelector","state","filters","dateFilter","positionFilterSelector","positionFilter","IMPORT_ACTIONS","filteredPortfolioSelector","portfolio","filteredPortfolio","filteredPortfolioSummary","TotalPL","tradeGroups","reduce","totalSum","tradeGroup","trades","tradeGroupSum","trade","tradePrice","PORTFOLIO_ACTIONS","initialState","undefined","All","history","rootReducer","combineReducers","action","type","REPORT_LOADED_FROM_HISTORY","payload","PORTFOLIO_FILTERED","importHistory","HISTORY_LOADED","DATE_FILTER_SELECTED","POSITION_FILTER_SELECTED","createStore","composeWithDevTools","OptionType","filterByDate","filter","dispatch","applyFilters","filterByPosition","filterService","dateFilters","Expired","expiration","Date","Open","isClosingCombinationWith","otherTrade","optionType","strikePrice","positionFilters","Closed","filteredTrades","find","tg","length","reportToFilter","this","report","store","getState","filtersState","dateOptions","connect","positionOptions","Filters","gutterBottom","Grid","container","spacing","item","xs","PortfolioSummaryComponent","summary","style","red","green","toFixed","columns","columnTitles","underlying","optionTarget","price","remainingDays","TradeHeader","TableHead","TableRow","column","TableCell","styles","createStyles","win","background","loss","withStyles","classes","className","getPriceString","cell","node","columnDisplayers","Call","toString","toLocaleDateString","TradeRow","child","empty","_tradeGroup","expand","padding","transform","transition","transitions","create","duration","shortest","expandOpen","groupRow","grey","useState","isOpen","setIsOpen","IconButton","onClick","clsx","sum","date","now","Math","floor","Number","getRemainingDays","group","i","PortfolioTableComponent","Table","TableBody","Portfolio","md","ImportHistory","importFromHistory","loadHistory","useEffect","List","ListItem","button","ListItemIcon","ListItemText","primary","ImportHistoryService","savedReports","localStorage","getItem","JSON","parse","rawImports","serializedHistory","stringify","setItem","getSavedHistory","raw","dateAsKey","getUTCMilliseconds","saveHistory","FlexQueryParserService","rawText","xmlDoc","DOMParser","parseFromString","Array","from","getElementsByTagName","tradeElement","expiry","getAttribute","parseInt","substr","Put","rawImport","file","resolve","reject","result","Promise","_resolve","_reject","console","debug","reader","FileReader","onload","rawCsv","readAsBinaryString","mapByUnderlyingAndExpiration","push","values","sort","a","b","myTrades","ParseMyTrades","getGroupsFromTrades","importHistoryService","reportParserService","loadReport","reportKey","GetRawImport","reportLoadedFromHistoryAction","ParseRawData","historyLoadedAction","GetRawImportKeys","importHistorySelector","input","display","upload","setFile","id","e","files","TextField","placeholder","htmlFor","Button","alert","Import","importFile","xhr","XMLHttpRequest","open","responseType","response","send","onImportExample","Parse","SaveRawImport","root","appBarSpacer","mixins","toolbar","content","flexGrow","height","overflow","paddingTop","paddingBottom","paper","flexDirection","Container","maxWidth","Paper","App","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5649140.chunk.js","sourcesContent":["\nexport enum DateFilter {\n  All = 1,\n  Expired = 2,\n  Open = 3\n}\n\nexport enum PositionFilter {\n  All = 1,\n  Closed = 2,\n  Open = 3\n}","import React from \"react\";\nimport { AppBar, Toolbar, Typography } from \"@material-ui/core\";\n\nconst HeaderComponent: React.FC = () => (\n  <AppBar position=\"absolute\">\n    <Toolbar>\n      <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap>\n        IBKR portfolio viewer\n      </Typography>\n    </Toolbar>\n  </AppBar>\n);\n\nexport default HeaderComponent;\n","import React from \"react\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { createMuiTheme } from \"@material-ui/core\";\n\nconst defaultTheme = createMuiTheme();\n\nconst AppThemeComponent: React.FC = ({children}) => (\n  <ThemeProvider theme={defaultTheme}>\n    {children}\n  </ThemeProvider>\n);\n\nexport default AppThemeComponent;\n","import React from \"react\";\nimport { FormControl, FormLabel } from \"@material-ui/core\";\n\nexport interface FilterProps {\n  label: string;\n}\n\nconst Filter: React.FC<FilterProps> = ({ label, children }) => {\n  return (\n    <FormControl component=\"fieldset\">\n      <FormLabel component=\"legend\">{label}</FormLabel>\n      {children}\n    </FormControl>\n  );\n};\n\nexport default Filter;\n","import React from \"react\";\nimport Filter, { FilterProps } from \"./Filter.component\";\nimport { RadioGroup, FormControlLabel, Radio } from \"@material-ui/core\";\n\nexport interface RadioFilterProps extends FilterProps {\n  prefix: string;\n  options: {\n    [key: string]: number;\n  };\n}\n\nexport interface RadioFilterStateProps {\n  selectedValue: number;\n}\n\nexport interface RadioFilterDispatchProps {\n  onSelected(value: number): void;\n}\n\nconst RadioFilter: React.FC<RadioFilterProps &\n  RadioFilterStateProps &\n  RadioFilterDispatchProps> = ({\n  prefix,\n  options,\n  selectedValue,\n  onSelected,\n  ...props\n}) => {\n  return (\n    <Filter {...props}>\n      <RadioGroup\n        aria-label=\"gender\"\n        name=\"gender1\"\n        value={selectedValue}\n        onChange={event => onSelected(+event.target.value)}\n      >\n        {Object.keys(options).map(key => (\n          <FormControlLabel\n            key={key}\n            value={options[key]}\n            control={<Radio />}\n            label={key}\n          />\n        ))}\n      </RadioGroup>\n    </Filter>\n  );\n};\n\nexport default RadioFilter;\n","import { AppState } from '../store';\n\nexport const dateFilterSelector = (state: AppState) => state.filters.dateFilter;\n\nexport const positionFilterSelector = (state: AppState) => state.filters.positionFilter;\n","import { AppAction } from '../actions';\nimport { DateFilter, PositionFilter } from './filters.models';\n\nexport enum FILTERS_ACTIONS {\n    DATE_FILTER_SELECTED = \"FILTERS/DATE_FILTER_SELECTED\",\n    POSITION_FILTER_SELECTED = \"FILTERS/POSITION_FILTER_SELECTED\",\n}\n\nexport const dateFilterSelectedAction: AppAction<FILTERS_ACTIONS.DATE_FILTER_SELECTED, DateFilter> = (payload) => ({\n    type: FILTERS_ACTIONS.DATE_FILTER_SELECTED,\n    payload\n});\n\nexport const positionFilterSelectedAction: AppAction<FILTERS_ACTIONS.POSITION_FILTER_SELECTED, PositionFilter> = (payload) => ({\n    type: FILTERS_ACTIONS.POSITION_FILTER_SELECTED,\n    payload\n});\n\nexport type FILTERS_ACTION_TYPES = ReturnType<typeof dateFilterSelectedAction> | ReturnType<typeof positionFilterSelectedAction>;","import { Report } from \"../models\";\nimport { AppAction } from '../actions';\n\nexport enum IMPORT_ACTIONS {\n    HISTORY_LOADED = \"IMPORT/HISTORY_LOADED\",\n    REPORT_LOADED_FROM_HISTORY = \"IMPORT/REPORT_LOADED_FROM_HISTORY\",\n}\n\nexport const historyLoadedAction: AppAction<IMPORT_ACTIONS.HISTORY_LOADED, string[]> = (history) => ({\n    type: IMPORT_ACTIONS.HISTORY_LOADED,\n    payload: history\n});\n\nexport const reportLoadedFromHistoryAction: AppAction<IMPORT_ACTIONS.REPORT_LOADED_FROM_HISTORY, Report> = (report) => ({\n    type: IMPORT_ACTIONS.REPORT_LOADED_FROM_HISTORY,\n    payload: report\n});\n\nexport type IMPORT_ACTION_TYPES = ReturnType<typeof historyLoadedAction> | ReturnType<typeof reportLoadedFromHistoryAction>;","import { AppState } from '../store';\n\nexport const originalPortfolioSelector = (state: AppState) => state.portfolio.portfolio;\nexport const filteredPortfolioSelector = (state: AppState) => state.portfolio.filteredPortfolio;\nexport const filteredPortfolioSummary = (state: AppState) => {\n    if (!state.portfolio.filteredPortfolio) {\n        return undefined;\n    }\n\n    const totalPL = state.portfolio.filteredPortfolio.tradeGroups.reduce((totalSum, tradeGroup) =>\n        totalSum + tradeGroup.trades.reduce((tradeGroupSum, trade) => tradeGroupSum + trade.tradePrice, 0)\n        , 0);\n\n    return {\n        TotalPL: -totalPL\n    }\n};","import { AppAction } from '../actions';\nimport { Report } from '../models';\n\nexport enum PORTFOLIO_ACTIONS {\n    PORTFOLIO_FILTERED\n}\n\nexport const portfolioFilteredAction: AppAction<PORTFOLIO_ACTIONS.PORTFOLIO_FILTERED, Report> = (payload) => ({\n    type: PORTFOLIO_ACTIONS.PORTFOLIO_FILTERED,\n    payload\n});\n\nexport type PORTFOLIO_ACTION_TYPES = ReturnType<typeof portfolioFilteredAction>;","import { Report } from '../models';\nimport { AppActionTypes } from '../actions';\nimport { IMPORT_ACTIONS } from '../import/import.actions';\nimport { PORTFOLIO_ACTIONS } from './portfolio.actions';\n\ninterface PortfolioState {\n    portfolio?: Report;\n    filteredPortfolio?: Report;\n}\n\nconst initialState: PortfolioState = {\n    portfolio: undefined,\n    filteredPortfolio: undefined\n};\n\nexport default function (state = initialState, action: AppActionTypes): PortfolioState {\n    switch (action.type) {\n        case IMPORT_ACTIONS.REPORT_LOADED_FROM_HISTORY: {\n            return {\n                portfolio: action.payload,\n                filteredPortfolio: action.payload\n            };\n        }\n        case PORTFOLIO_ACTIONS.PORTFOLIO_FILTERED: {\n            return {\n                ...state,\n                filteredPortfolio: action.payload\n            }\n        }\n        default:\n            return state;\n    }\n}\n","import { AppActionTypes } from '../actions';\nimport { DateFilter, PositionFilter } from './filters.models';\nimport { FILTERS_ACTIONS } from './filters.actions';\n\nexport interface FiltersState {\n    dateFilter: DateFilter,\n    positionFilter: PositionFilter\n}\n\nconst initialState: FiltersState = {\n    dateFilter: DateFilter.All,\n    positionFilter: PositionFilter.All\n};\n\nexport default function (state = initialState, action: AppActionTypes): FiltersState {\n    switch (action.type) {\n        case FILTERS_ACTIONS.DATE_FILTER_SELECTED: {\n            return {\n                ...state,\n                dateFilter: action.payload\n            }\n        }\n        case FILTERS_ACTIONS.POSITION_FILTER_SELECTED: {\n            return {\n                ...state,\n                positionFilter: action.payload\n            }\n        }\n        default:\n            return state;\n    }\n}\n","import { AppActionTypes } from '../actions';\nimport { IMPORT_ACTIONS } from './import.actions';\n\ninterface ImportHistoryState {\n    history: string[]\n}\n\nconst initialState: ImportHistoryState = {\n    history: [],\n};\n\nexport default function (state = initialState, action: AppActionTypes): ImportHistoryState {\n    switch (action.type) {\n        case IMPORT_ACTIONS.HISTORY_LOADED: {\n            return {\n                ...state,\n                history: action.payload\n            }\n        }\n        default:\n            return state;\n    }\n}\n","import { createStore, combineReducers } from \"redux\";\nimport portfolio from './portfolio/portfolio.reducer';\nimport filters from './filters/filters.reducer';\nimport importHistory from './import/importHistory.reducer';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nexport const rootReducer = combineReducers({\n    portfolio,\n    importHistory,\n    filters\n});\n\nexport type AppState = ReturnType<typeof rootReducer>\n\nexport default createStore(rootReducer, composeWithDevTools());","import { Report, TradeGroup, Trade } from \"../models\";\nimport { DateFilter, PositionFilter } from './filters.models';\nimport { FiltersState } from './filters.reducer';\n\nexport class FilterService {\n    public applyFilters(reportToFilter: Report, filters: FiltersState): Report {\n        const filtersToApply = [\n            this.filterByDate(filters.dateFilter),\n            this.filterByPosition(filters.positionFilter),\n        ];\n\n        const filteredPortfolio = filtersToApply.reduce((report, filter) => filter(report), reportToFilter)\n\n        return filteredPortfolio;\n    }\n\n    private filterByDate = (filter: DateFilter) => (portfolio: Report): Report => {\n        const dateFilters = {\n            [DateFilter.All]: () => true,\n            [DateFilter.Expired]: (tradeGroup: TradeGroup) => tradeGroup.expiration < new Date(),\n            [DateFilter.Open]: (tradeGroup: TradeGroup) => tradeGroup.expiration > new Date(),\n        }\n\n        const filteredPortfolio: Report = {\n            ...portfolio,\n            tradeGroups: portfolio.tradeGroups.filter(dateFilters[filter])\n        };\n\n        return filteredPortfolio;\n    }\n\n    private filterByPosition = (filter: PositionFilter) => (portfolio: Report): Report => {\n        const isClosingCombinationWith = (trade: Trade) =>(otherTrade: Trade) =>\n            trade.optionType === otherTrade.optionType &&\n            trade.strikePrice === otherTrade.strikePrice &&\n            trade.position === (-1 * otherTrade.position);\n\n        const positionFilters = {\n            [PositionFilter.All]: (tradeGroup: TradeGroup) => tradeGroup,\n            [PositionFilter.Closed]: (tradeGroup: TradeGroup) => {\n                const filteredTrades = tradeGroup.trades\n                    .filter(trade => tradeGroup.trades.find(isClosingCombinationWith(trade)))\n\n                return {\n                    ...tradeGroup,\n                    trades: filteredTrades\n                }\n            },\n            [PositionFilter.Open]: (tradeGroup: TradeGroup) => {\n                const filteredTrades = tradeGroup.trades\n                    .filter(trade => !tradeGroup.trades.find(isClosingCombinationWith(trade)))\n\n                return {\n                    ...tradeGroup,\n                    trades: filteredTrades\n                }\n            }\n        }\n\n        const filteredPortfolio: Report = {\n            ...portfolio,\n            tradeGroups: portfolio.tradeGroups\n                .map(positionFilters[filter])\n                .filter(tg => tg.trades.length > 0)\n        };\n\n        return filteredPortfolio;\n    }\n}","export enum OptionType {\n    Call = 1,\n    Put = 2\n}\nexport interface Trade {\n    underlying: string;\n    position: number;\n    expiration: Date;\n    optionType: OptionType;\n    strikePrice: number;\n    tradePrice: number;\n}\n\nexport interface Report {\n    name: string;\n    tradeGroups: TradeGroup[];\n}\n\nexport interface TradeGroup {\n    underlying: string;\n    expiration: Date;\n    trades: Trade[];\n}\n","import { Dispatch } from 'redux';\nimport { DateFilter, PositionFilter } from './filters.models';\nimport { dateFilterSelectedAction, positionFilterSelectedAction } from './filters.actions';\nimport { originalPortfolioSelector } from '../portfolio/portfolio.selector';\nimport store from '../store';\nimport { portfolioFilteredAction } from '../portfolio/portfolio.actions';\nimport { FilterService } from './filter.service';\n\nexport const filterByDate = (filter: DateFilter) => (dispatch: Dispatch) => {\n    dispatch(dateFilterSelectedAction(filter));\n\n    applyFilters(dispatch);\n}\n\nexport const filterByPosition = (filter: PositionFilter) => (dispatch: Dispatch) => {\n    dispatch(positionFilterSelectedAction(filter));\n\n    applyFilters(dispatch);\n}\n\n\nconst filterService = new FilterService();\nconst applyFilters = (dispatch: Dispatch) => {\n    const portfolio = originalPortfolioSelector(store.getState());\n    \n    if (!portfolio) {\n        return;\n    }\n\n    const filtersState = store.getState().filters;\n    const filteredPortfolio = filterService.applyFilters(portfolio, filtersState);\n   \n    dispatch(portfolioFilteredAction(filteredPortfolio));\n}","import { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport RadioFilter, {\n  RadioFilterStateProps,\n  RadioFilterDispatchProps\n} from \"./RadioFilter.component\";\nimport React from \"react\";\nimport { DateFilter } from \"./filters.models\";\nimport { dateFilterSelector } from \"./filters.selectors\";\nimport { AppState } from \"../store\";\nimport { filterByDate } from \"./filters.actioncreators\";\n\nconst mapStateToProps = (state: AppState): RadioFilterStateProps => ({\n  selectedValue: dateFilterSelector(state) as number\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): RadioFilterDispatchProps => ({\n  onSelected: (value: number) => {\n    filterByDate(value as DateFilter)(dispatch);\n  }\n});\n\nconst dateOptions = {\n  All: DateFilter.All,\n  Expired: DateFilter.Expired,\n  Open: DateFilter.Open\n};\n\nconst DateFilterComponent: React.FC<\n  RadioFilterStateProps & RadioFilterDispatchProps\n> = ({ ...props }) => (\n  <RadioFilter prefix={'date'} label={\"By Date\"} options={dateOptions} {...props} />\n);\n\nexport default connect<\n  RadioFilterStateProps,\n  RadioFilterDispatchProps,\n  {},\n  AppState\n>(\n  mapStateToProps,\n  mapDispatchToProps\n)(DateFilterComponent);\n","import { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport RadioFilter, {\n  RadioFilterStateProps,\n  RadioFilterDispatchProps\n} from \"./RadioFilter.component\";\nimport React from \"react\";\nimport { PositionFilter } from \"./filters.models\";\nimport { AppState } from \"../store\";\nimport { positionFilterSelector } from \"./filters.selectors\";\nimport { filterByPosition } from \"./filters.actioncreators\";\n\nconst mapStateToProps = (state: AppState): RadioFilterStateProps => ({\n  selectedValue: positionFilterSelector(state) as number\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): RadioFilterDispatchProps => ({\n  onSelected: (value: number) => {\n    filterByPosition(value as PositionFilter)(dispatch);\n  }\n});\n\nconst positionOptions = {\n  All: PositionFilter.All,\n  Closed: PositionFilter.Closed,\n  Open: PositionFilter.Open\n};\n\nconst PositionFilterComponent: React.FC<\n  RadioFilterStateProps & RadioFilterDispatchProps\n> = ({ ...props }) => (\n  <RadioFilter\n    prefix={\"position\"}\n    label={\"By Position\"}\n    options={positionOptions}\n    {...props}\n  />\n);\n\nexport default connect<\n  RadioFilterStateProps,\n  RadioFilterDispatchProps,\n  {},\n  AppState\n>(\n  mapStateToProps,\n  mapDispatchToProps\n)(PositionFilterComponent);\n","import React from \"react\";\nimport DateFilter from \"./DateFilter.container\";\nimport PositionFilter from \"./PositionFilter.container\";\nimport \"./filters.scss\";\nimport { Grid, Typography } from \"@material-ui/core\";\n\nconst Filters: React.FC = () => {\n  return (\n    <>\n      <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n        Filters\n      </Typography>\n      <Grid container spacing={2}>\n        <Grid item xs={4}>\n          <DateFilter />\n        </Grid>\n        <Grid item xs={4}>\n          <PositionFilter />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default Filters;\n","import React from \"react\";\nimport { PortfolioSummary } from \"./models\";\nimport { Typography } from \"@material-ui/core\";\nimport green from \"@material-ui/core/colors/green\";\nimport red from \"@material-ui/core/colors/red\";\n\nexport interface PortfolioSummaryStateProps {\n  summary?: PortfolioSummary;\n}\n\nconst PortfolioSummaryComponent: React.FC<PortfolioSummaryStateProps> = ({\n  summary\n}) => {\n  if (summary === undefined) {\n    return null;\n  }\n\n  return (\n    <>\n      <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n        Summary\n      </Typography>\n      Total P/L: \n      <Typography\n        component=\"span\"\n        style={{\n          color: summary.TotalPL < 0 ? red[500] : green[500]\n        }}\n      >\n        ${(summary.TotalPL * 100).toFixed(2)}\n      </Typography>\n    </>\n  );\n};\n\nexport default PortfolioSummaryComponent;\n","import { connect } from \"react-redux\";\nimport { AppState } from \"../store\";\nimport { filteredPortfolioSummary } from './portfolio.selector';\nimport PortfolioSummaryComponent, { PortfolioSummaryStateProps } from './PortfolioSummary.component';\n\nconst mapStateToProps = (state: AppState): PortfolioSummaryStateProps => ({\n    summary: filteredPortfolioSummary(state)\n})\n\nexport default connect<PortfolioSummaryStateProps, {}, {}, AppState>(\n    mapStateToProps\n)(PortfolioSummaryComponent);","export const columns = [\n  'action',\n  'underlying',\n  'optionType',\n  'optionTarget',\n  'position',\n  'price',\n  'expiration',\n  'remainingDays'\n] as const;\n\nexport type columns = typeof columns[number]; // Thanks typescript 3.4 !!!\n\nexport interface PortfolioSummary {\n  TotalPL: number;\n}","import React from \"react\";\nimport { columns } from \"./models\";\nimport { TableHead, TableCell, TableRow } from \"@material-ui/core\";\n\nconst columnTitles: { [key in columns]: string } = {\n  action: \"\",\n  underlying: \"Underlying\",\n  optionTarget: \"Option Target\",\n  optionType: \"Option Type\",\n  position: \"Position\",\n  expiration: \"Expiration\",\n  price: \"Price\",\n  remainingDays: \"Remaining days\"\n};\n\nconst TradeHeader: React.FC = () => {\n  return (\n    <TableHead>\n      <TableRow>\n        {columns.map(column => (\n          <TableCell key={column}>{columnTitles[column]}</TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n};\n\nexport default TradeHeader;\n","import React from \"react\";\nimport {\n  TableCell,\n  createStyles,\n  WithStyles,\n  withStyles\n} from \"@material-ui/core\";\nimport { green, red } from \"@material-ui/core/colors\";\n\nconst colorDepth = 700;\nconst styles = createStyles({\n  win: {\n    background: green[colorDepth],\n    color: \"white\"\n  },\n  loss: {\n    background: red[colorDepth],\n    color: \"white\"\n  }\n});\n\nexport interface PriceColumnProps {\n  price: number;\n}\n\nconst getPriceString = (price: number) => {\n  return price < 0 ? (price * -1).toFixed(2) : price.toFixed(2);\n};\n\nconst PriceColumn: React.FC<PriceColumnProps & WithStyles<typeof styles>> = ({\n  price,\n  classes\n}) => {\n  return (\n    <TableCell className={price > 0 ? classes.loss : classes.win}>\n      {getPriceString(price)}\n    </TableCell>\n  );\n};\n\nexport default withStyles(styles)(PriceColumn);\n","import { OptionType, Trade } from \"../models\";\nimport React from \"react\";\nimport { columns } from \"./models\";\nimport PriceColumn from \"./PriceColumn.component\";\nimport { TableRow, TableCell } from '@material-ui/core';\n\nexport interface TradeRowProps {\n  trade: Trade;\n}\n\nconst cell = (key: string, node: React.ReactNode) => (\n  <TableCell className={key} key={key}>\n    {node}\n  </TableCell>\n);\n\nconst columnDisplayers: {\n  [key in columns]: (trade: Trade) => React.ReactNode;\n} = {\n  action: () => cell(\"action\", \"\"),\n  underlying: trade => cell(\"underlying\", trade.underlying),\n  optionType: trade =>\n    cell(\n      \"optionType\",\n      trade.optionType === OptionType.Call ? \"CALL\" : \"PUT\"\n    ),\n  optionTarget: trade =>\n    cell(\"optionTarget\", trade.strikePrice.toString()),\n  position: trade => cell(\"position\", trade.position.toString()),\n  expiration: trade =>\n    cell(\"expiration\", trade.expiration.toLocaleDateString()),\n  price: trade => <PriceColumn key={\"price\"} price={trade.tradePrice} />,\n  remainingDays: () => cell(\"remainingDays\", \"\")\n};\n\nconst TradeRow: React.FC<TradeRowProps> = ({ trade }) => {\n  return <TableRow>{columns.map(column => columnDisplayers[column](trade))}</TableRow>;\n};\n\nexport default TradeRow;\n","import { TradeGroup } from \"../models\";\nimport React, { useState } from \"react\";\nimport { columns } from \"./models\";\nimport TradeRow from \"./TradeRow.component\";\nimport PriceColumn from \"./PriceColumn.component\";\nimport { TableRow, TableCell, IconButton, Theme } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { withStyles, createStyles, WithStyles } from \"@material-ui/styles\";\nimport clsx from 'clsx';\nimport { grey } from \"@material-ui/core/colors\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    expand: {\n      padding: 0,\n      transform: \"rotate(0deg)\",\n      transition: theme.transitions.create(\"transform\", {\n        duration: theme.transitions.duration.shortest\n      })\n    },\n    expandOpen: {\n      transform: \"rotate(180deg)\"\n    },\n    groupRow: {\n      background: grey[300]\n    }\n  });\n\nexport interface TradeGroupRowProps {\n  tradeGroup: TradeGroup;\n}\n\ninterface CollapseableTradeGroup extends TradeGroup {\n  isOpen: boolean;\n}\n\nconst getRemainingDays = (date: Date): string => {\n  const now = new Date();\n\n  const remainingDays = Math.floor(\n    (Number(date) - Number(now)) / 1000 / 60 / 60 / 24\n  );\n\n  return remainingDays < 0 ? \"EXPIRED\" : remainingDays.toString();\n};\n\nconst cell = (key: string, child: React.ReactNode) => (\n  <TableCell key={key} className={key}>\n    {child}\n  </TableCell>\n);\nconst empty = (key: string) => (_tradeGroup: TradeGroup) => cell(key, \"\");\n\nconst TradeGroupRow: React.FC<TradeGroupRowProps &\n  WithStyles<typeof styles>> = ({ tradeGroup, classes }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggleIsOpen = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const columnDisplayers: {\n    [key in columns]: (tradeGroup: CollapseableTradeGroup) => React.ReactNode;\n  } = {\n    action: tradeGroup =>\n      cell(\n        \"action\",\n        <IconButton\n          aria-label=\"share\"\n          onClick={() => toggleIsOpen()}\n          className={clsx(classes.expand, {\n            [classes.expandOpen]: tradeGroup.isOpen\n          })}\n        >\n          <ExpandMoreIcon />\n        </IconButton>\n      ),\n    underlying: tradeGroup => cell(\"underlying\", tradeGroup.underlying),\n    optionType: empty(\"optionType\"),\n    optionTarget: empty(\"optionTarget\"),\n    position: empty(\"position\"),\n    price: tradeGroup => (\n      <PriceColumn\n        key={\"price\"}\n        price={tradeGroup.trades.reduce(\n          (sum, trade) => (sum += trade.tradePrice),\n          0\n        )}\n      />\n    ),\n    expiration: tradeGroup =>\n      cell(\"expiration\", tradeGroup.expiration.toLocaleDateString()),\n    remainingDays: tradeGroup =>\n      cell(\"remainingDays\", getRemainingDays(tradeGroup.expiration))\n  };\n\n  const group: CollapseableTradeGroup = { ...tradeGroup, isOpen };\n\n  return (\n    <>\n      <TableRow className={classes.groupRow}>\n        {columns.map(column => columnDisplayers[column](group))}\n      </TableRow>\n      {isOpen\n        ? tradeGroup.trades.map((trade, i) => (\n            <TradeRow trade={trade} key={i} />\n          ))\n        : null}\n    </>\n  );\n};\n\nexport default withStyles(styles)(TradeGroupRow);\n","import React from \"react\";\nimport { Report } from \"../models\";\nimport TradeHeader from \"./TradeHeader.component\";\nimport TradeGroupRow from \"./TradeGroupRow.component\";\nimport { Table, TableBody } from \"@material-ui/core\";\n\nexport interface PortfolioTableProps {\n  report: Report;\n}\n\nconst PortfolioTableComponent: React.FC<PortfolioTableProps> = ({ report }) => (\n  <Table>\n    <TradeHeader />\n    <TableBody>\n      {report.tradeGroups.map((group, i) => (\n        <TradeGroupRow tradeGroup={group} key={i} />\n      ))}\n    </TableBody>\n  </Table>\n);\n\nexport default PortfolioTableComponent;\n","import { Report } from \"../models\";\nimport React from \"react\";\nimport Filters from \"../filters/Filters.component\";\nimport PortfolioSummary from \"./PortfolioSummary.container\";\nimport { Grid } from \"@material-ui/core\";\nimport PortfolioTable from \"./PortfolioTable.component\";\n\nexport interface PortfolioStateProps {\n  report?: Report;\n}\n\nconst Portfolio: React.FC<PortfolioStateProps> = ({ report }) => {\n  if (!report) {\n    return null;\n  }\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={12} md={6}>\n        <PortfolioSummary />\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <Filters />\n      </Grid>\n      <Grid item xs={12}>\n        <PortfolioTable report={report} />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Portfolio;\n","import { connect } from \"react-redux\";\nimport { AppState } from \"../store\";\nimport { PortfolioStateProps } from \"./Portfolio.component\";\nimport Portfolio from './Portfolio.component';\nimport { filteredPortfolioSelector } from './portfolio.selector';\n\nconst mapStateToProps = (state: AppState): PortfolioStateProps => ({\n    report: filteredPortfolioSelector(state)\n})\n\nexport default connect<PortfolioStateProps, {}, {}, AppState>(\n    mapStateToProps\n)(Portfolio);","import React, { useEffect } from \"react\";\nimport {\n  Grid,\n  Typography,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon\n} from \"@material-ui/core\";\nimport BarChartIcon from \"@material-ui/icons/BarChart\";\n\nexport interface ImportHistoryStateProps {\n  history: string[];\n}\n\nexport interface ImportHistoryDispatchProps {\n  importFromHistory(reportKey: string): void;\n  loadHistory(): void;\n}\n\nconst ImportHistory: React.FC<ImportHistoryStateProps &\n  ImportHistoryDispatchProps> = ({\n  history,\n  importFromHistory,\n  loadHistory\n}) => {\n  useEffect(() => {\n    loadHistory();\n  }, [loadHistory]);\n\n  return (\n    <Grid>\n      <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n        Imported reports\n      </Typography>\n      <List component=\"nav\" aria-label=\"Main mailbox folders\">\n        {history.map(key => (\n          <ListItem button onClick={() => importFromHistory(key)} key={key}>\n            <ListItemIcon>\n              <BarChartIcon />\n            </ListItemIcon>\n            <ListItemText primary={key} />\n          </ListItem>\n        ))}\n      </List>\n    </Grid>\n  );\n};\n\nexport default ImportHistory;\n","const HISTORY_KEY = \"savedImports\";\n\ninterface History {\n  rawImports: { [key: string]: string };\n}\n\nexport class ImportHistoryService {\n  private getSavedHistory(): History {\n    const savedReports = localStorage.getItem(HISTORY_KEY);\n    if (savedReports) {\n      return JSON.parse(savedReports) as History;\n    } else {\n      return {\n        rawImports: {}\n      };\n    }\n  }\n\n  private saveHistory(history: History) {\n    const serializedHistory = JSON.stringify(history);\n    localStorage.setItem(HISTORY_KEY, serializedHistory);\n  }\n\n  public GetRawImportKeys() {\n    const history = this.getSavedHistory();\n\n    return Object.keys(history.rawImports);\n  }\n\n  public GetRawImport(key: string) {\n    const history = this.getSavedHistory();\n\n    return history.rawImports[key];\n  }\n\n  public SaveRawImport(raw: string) {\n    const history = this.getSavedHistory();\n\n    const dateAsKey = new Date().getUTCMilliseconds().toString();\n    history.rawImports[dateAsKey] = raw;\n\n    this.saveHistory(history);\n  }\n}\n","import { ParserBase } from './ParserBase.service';\nimport { Trade, OptionType } from '../../models';\n\nexport class FlexQueryParserService extends ParserBase {\n    protected ParseMyTrades(rawText: string): Trade[] {\n        const parser = new DOMParser();\n        const xmlDoc = parser.parseFromString(rawText, \"text/xml\");\n\n        const trades: Trade[] = Array.from(xmlDoc.getElementsByTagName('Trade')).map(tradeElement => {\n            const expiry = tradeElement.getAttribute('expiry')!;\n            const position = parseInt(tradeElement.getAttribute('quantity')!);\n            return {\n                underlying: tradeElement.getAttribute('underlyingSymbol')!,\n                position,\n                expiration: new Date(+expiry.substr(0, 4), +expiry.substr(4, 2) - 1, +expiry.substr(6, 2)),\n                optionType: tradeElement.getAttribute('putCall') === 'P' ? OptionType.Put : OptionType.Call,\n                strikePrice: +tradeElement.getAttribute('strike')!,\n                tradePrice: (position < 0 ? -1 : 1) * (+tradeElement.getAttribute('tradePrice')!)\n            } as Trade\n        });\n\n        return trades;\n    }\n}","import { IParser } from './IParser.service';\nimport { Report, Trade, TradeGroup } from '../../models';\n\nexport abstract class ParserBase implements IParser {\n    private rawImport: string = \"\";\n\n    public Parse(file: File): Promise<string> {\n        let resolve: (raw: string) => void;\n        let reject: (error: string) => void;\n\n        this.rawImport = \"\";\n\n        const result = new Promise<string>(\n            (_resolve: (raw: string) => void, _reject) => {\n                [resolve, reject] = [_resolve, _reject];\n            }\n        );\n\n        console.debug(`Parsing ${file.name}...`);\n\n        var reader = new FileReader();\n\n        reader.onload = () => {\n            console.debug(\"File loaded.\");\n            const rawCsv = reader.result as string;\n            this.rawImport = rawCsv;\n\n            try {\n                resolve(this.rawImport);\n            } catch {\n                this.rawImport = \"\";\n                reject(\"Error while parsing...\");\n            }\n        };\n\n        reader.readAsBinaryString(file);\n\n        return result;\n    }\n\n    protected getGroupsFromTrades(trades: Trade[]) {\n        const mapByUnderlyingAndExpiration = trades.reduce((map, trade) => {\n            const { expiration, underlying } = trade;\n            const key = `${underlying} - ${expiration.toLocaleDateString()}`;\n\n            if (!map[key]) {\n                map[key] = {\n                    underlying,\n                    expiration,\n                    trades: []\n                };\n            }\n\n            map[key].trades.push(trade);\n\n            return map;\n        }, {} as { [key: string]: TradeGroup })\n\n        return Object.values(mapByUnderlyingAndExpiration)\n            .sort((a, b) => +a.expiration - +b.expiration);\n    }\n\n    public ParseRawData(rawText: string): Report {\n        const myTrades = this.ParseMyTrades(rawText);\n\n        const tradeGroups = this.getGroupsFromTrades(myTrades);\n\n        return {\n            name: \"ok\",\n            tradeGroups,\n        };\n    }\n\n    protected abstract ParseMyTrades(rawText: string): Trade[];\n}","import { Dispatch } from \"redux\";\nimport { ImportHistoryService } from './ImportHistory.service';\n// import { ReportParserService } from \"./Parser/ReportParser.service\";\nimport { reportLoadedFromHistoryAction, historyLoadedAction } from './import.actions';\nimport { IParser } from './Parser/IParser.service';\nimport { FlexQueryParserService } from './Parser/FlexQueryParser.service';\n\nconst importHistoryService = new ImportHistoryService();\nconst reportParserService: IParser = new FlexQueryParserService();\n\nexport const loadReport = (reportKey: string) => (dispatch: Dispatch) => {\n    const rawImport = importHistoryService.GetRawImport(reportKey);\n    const report = reportParserService.ParseRawData(rawImport);\n\n    return dispatch(reportLoadedFromHistoryAction(report));\n}\n\nexport const loadHistory = () => (dispatch: Dispatch) => {\n    const history = importHistoryService.GetRawImportKeys();\n\n    return dispatch(historyLoadedAction(history));\n}\n\n\nexport const importFile = (file: File) => async (dispatch: Dispatch) => {\n    const rawImport = await reportParserService.Parse(file);\n    importHistoryService.SaveRawImport(rawImport);\n    loadHistory()(dispatch);\n}","import { AppState } from '../store';\n\nexport const importHistorySelector = (state: AppState) => state.importHistory.history;","import { connect } from \"react-redux\";\nimport { AppState } from \"../store\";\nimport ImportHistory, { ImportHistoryDispatchProps, ImportHistoryStateProps } from './ImportHistory.component';\nimport { Dispatch } from 'redux';\nimport { loadReport, loadHistory } from './import.actioncreators';\nimport { importHistorySelector } from \"./import.selectors\";\n\nconst mapStateToProps = (state: AppState): ImportHistoryStateProps => ({\n  history: importHistorySelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): ImportHistoryDispatchProps => ({\n  importFromHistory: (key: string) => { loadReport(key)(dispatch) },\n  loadHistory: ()=> loadHistory()(dispatch)\n})\n\nexport default connect<ImportHistoryStateProps, ImportHistoryDispatchProps, \n{}, AppState>(\n  mapStateToProps, mapDispatchToProps\n)(ImportHistory);","import React, { useState } from \"react\";\nimport {\n  Button,\n  WithStyles,\n  createStyles,\n  withStyles,\n  TextField\n} from \"@material-ui/core\";\n\nconst styles = () =>\n  createStyles({\n    input: {\n      display: \"none\"\n    }\n  });\n\nexport interface FileUploadProps {\n  upload(file: File): void;\n}\n\nconst FileUploadComponent: React.FC<FileUploadProps &\n  WithStyles<typeof styles>> = ({ upload, classes }) => {\n  const [file, setFile] = useState<FileList | null>();\n\n  const onImport = () => {\n    if (!file || file.length !== 1) {\n      alert(\"please provide a single file!\");\n      return;\n    }\n\n    upload(file[0]);\n  };\n\n  return (\n    <>\n      <input\n        className={classes.input}\n        id=\"raised-button-file\"\n        type=\"file\"\n        onChange={e => setFile(e.target.files)}\n      />\n      <TextField\n        value={file && file.length ? file[0].name : undefined}\n        placeholder=\"No file chosen\"\n      />\n\n      <label htmlFor=\"raised-button-file\">\n        <Button component=\"span\">Select file</Button>\n      </label>\n      {file && file.length ? (\n        <Button onClick={() => onImport()} color=\"primary\" variant=\"contained\">\n          Import\n        </Button>\n      ) : null}\n    </>\n  );\n};\n\nexport default withStyles(styles)(FileUploadComponent);\n","import React from \"react\";\nimport { Grid, Typography, Button } from \"@material-ui/core\";\nimport FileUploadComponent from \"./FileUpload.component\";\n\nexport interface ImportDispatchProps {\n  importFile(file: File): void;\n}\n\nconst Import: React.FC<ImportDispatchProps> = ({ importFile }) => {\n  const onImportExample = () => {\n    const exampleFileUrl = \"/example.xml\";\n\n    let xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", exampleFileUrl);\n    xhr.responseType = \"blob\";\n    xhr.onload = function() {\n      importFile(xhr.response);\n    };\n    xhr.send();\n  };\n\n  return (\n    <>\n      <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n        Import flex query\n      </Typography>\n      <Grid container spacing={1}>\n        <Grid item xs={12}>\n          <FileUploadComponent upload={importFile} />\n        </Grid>\n        <Grid item xs={12}>\n          If you have no flex queries exported yet:&nbsp;\n          <Button\n            onClick={() => onImportExample()}\n            color=\"primary\"\n            variant=\"contained\"\n          >\n            Load example\n          </Button>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default Import;\n","import { connect } from \"react-redux\";\nimport { AppState } from \"../store\";\nimport { Dispatch } from 'redux';\nimport Import, { ImportDispatchProps } from './Import.component';\nimport { importFile } from \"./import.actioncreators\";\n\nconst mapDispatchToProps = (dispatch: Dispatch): ImportDispatchProps => ({\n  importFile: (file) => importFile(file)(dispatch)\n})\n\nexport default connect<{}, ImportDispatchProps, {}, AppState>(\n  null, mapDispatchToProps\n)(Import);\n","import React from \"react\";\nimport { withStyles, createStyles, WithStyles } from \"@material-ui/styles\";\nimport { Theme, Container, Grid, Paper } from \"@material-ui/core\";\nimport Portfolio from \"./portfolio/Portfolio.container\";\nimport ImportHistory from \"./import/ImportHistory.container\";\nimport Import from \"./import/Import.container\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\"\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n      flexGrow: 1,\n      height: \"100vh\",\n      overflow: \"auto\"\n    },\n    container: {\n      paddingTop: theme.spacing(4),\n      paddingBottom: theme.spacing(4)\n    },\n    paper: {\n      padding: theme.spacing(2),\n      display: \"flex\",\n      overflow: \"auto\",\n      flexDirection: \"column\"\n    }\n  });\n\nconst MainComponent: React.FC<WithStyles<typeof styles>> = ({ classes }) => {\n  return (\n    <main className={classes.content}>\n      <div className={classes.appBarSpacer} />\n      <Container maxWidth=\"lg\" className={classes.container}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <Paper className={classes.paper}>\n              <ImportHistory />\n            </Paper>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Paper className={classes.paper}>\n              <Import />\n            </Paper>\n          </Grid>\n          <Grid item xs={12}>\n            <Paper className={classes.paper}>\n              <Portfolio />\n            </Paper>\n          </Grid>\n        </Grid>\n      </Container>\n    </main>\n  );\n};\n\nexport default withStyles(styles)(MainComponent);\n","import React from \"react\";\nimport \"./App.scss\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport HeaderComponent from \"./Header.component\";\nimport AppThemeComponent from \"./AppTheme.component\";\nimport MainComponent from \"./Main.component\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\nconst App: React.FC = () => (\n  <AppThemeComponent>\n    <Provider store={store}>\n      <div className=\"app\">\n        <CssBaseline />\n        <HeaderComponent />\n        <MainComponent />\n      </div>\n    </Provider>\n  </AppThemeComponent>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
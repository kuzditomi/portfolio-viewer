{"version":3,"sources":["filters/filters.models.ts","Header.component.tsx","AppTheme.component.tsx","portfolio/portfolio.selector.ts","portfolio/PortfolioSummary.component.tsx","portfolio/PortfolioSummary.container.ts","filters/Filter.component.tsx","filters/RadioFilter.component.tsx","filters/filters.selectors.ts","filters/filters.actions.ts","import/import.actions.ts","portfolio/portfolio.actions.ts","portfolio/portfolio.reducer.ts","filters/filters.reducer.ts","import/importHistory.reducer.ts","store.ts","calculations/TradesCompare.service.ts","calculations/PL.Service.ts","filters/filter.service.ts","models.ts","filters/filters.actioncreators.ts","filters/DateFilter.container.tsx","filters/PositionFilter.container.tsx","filters/Filters.component.tsx","import/ImportHistory.component.tsx","import/ImportHistory.service.ts","import/Parser/ParserBase.service.ts","import/Parser/FlexQueryParser.service.ts","import/import.actioncreators.ts","import/import.selectors.ts","import/ImportHistory.container.ts","import/FileUpload.component.tsx","import/Import.component.tsx","import/Import.container.ts","portfolio/models.ts","portfolio/table/TradeHeader.component.tsx","portfolio/table/PriceColumn.component.tsx","portfolio/table/TradeRow.component.tsx","portfolio/table/PLColumn.component.tsx","portfolio/table/TradeGroupRow.component.tsx","portfolio/table/TradeGroupRow.container.ts","portfolio/table/PortfolioTable.component.tsx","chart/Chart.service.ts","chart/Chart.component.tsx","chart/ChartPage.component.tsx","chart/ChartPage.container.ts","switcher/SwitcherItem.component.tsx","switcher/Switcher.component.tsx","Main.component.tsx","Main.container.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["DateFilter","PositionFilter","HeaderComponent","AppBar","position","Toolbar","Typography","component","variant","color","noWrap","defaultTheme","createMuiTheme","palette","primary","blueGrey","AppThemeComponent","children","ThemeProvider","theme","filteredPortfolioSelector","state","portfolio","filteredPortfolio","filteredPortfolioSummary","TotalPL","tradeGroups","reduce","totalSum","tradeGroup","trades","tradeGroupSum","trade","tradePrice","isChartOpenSelector","chartData","chartDataSelector","styles","createStyles","win","green","loss","red","withStyles","summary","classes","undefined","gutterBottom","Table","TableBody","TableRow","TableCell","align","className","toFixed","connect","PortfolioSummaryComponent","Filter","label","FormControl","FormLabel","RadioFilter","prefix","options","selectedValue","onSelected","props","RadioGroup","aria-label","name","value","onChange","event","target","Object","keys","map","key","FormControlLabel","control","Radio","FILTERS_ACTIONS","dateFilterSelector","filters","dateFilter","positionFilterSelector","positionFilter","IMPORT_ACTIONS","PORTFOLIO_ACTIONS","initialState","All","history","rootReducer","combineReducers","action","type","REPORT_LOADED_FROM_HISTORY","payload","PORTFOLIO_FILTERED","OPEN_CHART","CLOSE_CHART","importHistory","HISTORY_LOADED","DATE_FILTER_SELECTED","POSITION_FILTER_SELECTED","createStore","composeWithDevTools","TradesCompareService","isClosingCombinationWith","otherTrade","optionType","strikePrice","getPLForGroup","group","closingTrade","find","tradeDate","Math","abs","PLService","setPLForGroup","pl","OptionType","filterByDate","filter","dispatch","applyFilters","filterByPosition","filterService","dateFilters","Expired","expiration","Date","Open","positionFilters","Closed","filteredTrades","tg","length","reportToFilter","this","report","store","getState","filtersState","dateOptions","positionOptions","Filters","Grid","container","spacing","item","xs","delete","open","blue","importFromHistory","loadHistory","deleteFromHistory","useEffect","List","ListItem","button","onClick","ListItemIcon","IconButton","title","ListItemText","stopPropagation","ImportHistoryService","savedReports","localStorage","getItem","JSON","parse","rawImports","serializedHistory","stringify","setItem","getSavedHistory","raw","dateAsKey","getUTCMilliseconds","toString","saveHistory","Error","ParserBase","rawImport","file","resolve","reject","result","Promise","_resolve","_reject","console","debug","reader","FileReader","onload","rawCsv","readAsBinaryString","mapByUnderlyingAndExpiration","underlying","toLocaleDateString","push","values","sort","a","b","rawText","myTrades","ParseMyTrades","getGroupsFromTrades","FlexQueryParserService","xmlDoc","DOMParser","parseFromString","Array","from","getElementsByTagName","tradeElement","expiry","getAttribute","parseInt","substr","Put","Call","importHistoryService","reportParserService","loadReport","reportKey","GetRawImport","reportLoadedFromHistoryAction","ParseRawData","historyLoadedAction","GetRawImportKeys","importHistorySelector","DeleteReport","ImportHistory","input","display","upload","useState","setFile","id","e","files","TextField","placeholder","htmlFor","Button","alert","Import","importFile","importFileFromPath","filepath","xhr","XMLHttpRequest","responseType","response","send","Parse","SaveRawImport","columns","columnTitles","price","remainingDays","TradeHeader","TableHead","column","badge","borderRadius","padding","marginRight","background","clsx","cell","node","columnDisplayers","TradeRow","amount","getPLString","child","empty","_tradeGroup","icon","expand","transform","transition","transitions","create","duration","shortest","expandOpen","groupRow","grey","chartIcon","showChart","isOpen","setIsOpen","sum","date","now","floor","Number","getRemainingDays","i","TradeGroupRowComponent","PortfolioTableComponent","size","getTradePLAtExpiry","underLyingPrice","isCall","isOverStrikePrice","tradeAbsPrice","getGroupPLAtExpiry","showMainStrategyOnly","isStrategy","getHeaderFromTrade","width","height","chartType","data","headers","getHeaders","to","middlePoint","t","strikes","min","max","distance","getBoundaries","points","x","valuesForX","ChartService","strategyValue","getChartPoints","hAxis","vAxis","series","_","lineDashStyle","getSeriesOptions","backIcon","controls","margin","textAlign","closeChart","setShowMainStrategyOnly","Switch","checked","ChartPageComponent","flexShrink","active","marginLeft","offsetLeft","offsetRight","offset","overflow","getOffsetForChildren","index","totalCount","activeKey","childrenItems","React","Children","toArray","forEach","switcherKey","root","appBarSpacer","mixins","toolbar","content","flexGrow","paddingTop","paddingBottom","paper","flexDirection","isChartOpen","Container","maxWidth","md","Paper","MainComponent","App","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f18ca96.chunk.js","sourcesContent":["\nexport enum DateFilter {\n  All = 1,\n  Expired = 2,\n  Open = 3\n}\n\nexport enum PositionFilter {\n  All = 1,\n  Closed = 2,\n  Open = 3\n}","import React from \"react\";\nimport { AppBar, Toolbar, Typography } from \"@material-ui/core\";\n\nconst HeaderComponent: React.FC = () => (\n  <AppBar position=\"absolute\">\n    <Toolbar>\n      <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap>\n        IBKR portfolio viewer\n      </Typography>\n    </Toolbar>\n  </AppBar>\n);\n\nexport default HeaderComponent;\n","import React from \"react\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { createMuiTheme } from \"@material-ui/core\";\nimport { blueGrey } from '@material-ui/core/colors';\n\nconst defaultTheme = createMuiTheme({\n  palette: {\n    primary: blueGrey\n  }\n});\n\nconst AppThemeComponent: React.FC = ({children}) => (\n  <ThemeProvider theme={defaultTheme}>\n    {children}\n  </ThemeProvider>\n);\n\nexport default AppThemeComponent;\n","import { AppState } from '../store';\n\nexport const originalPortfolioSelector = (state: AppState) => state.portfolio.portfolio;\nexport const filteredPortfolioSelector = (state: AppState) => state.portfolio.filteredPortfolio;\nexport const filteredPortfolioSummary = (state: AppState) => {\n    if (!state.portfolio.filteredPortfolio) {\n        return undefined;\n    }\n\n    const totalPL = state.portfolio.filteredPortfolio.tradeGroups.reduce((totalSum, tradeGroup) =>\n        totalSum + tradeGroup.trades.reduce((tradeGroupSum, trade) => tradeGroupSum + trade.tradePrice, 0)\n        , 0);\n\n    return {\n        TotalPL: -totalPL\n    }\n};\n\nexport const isChartOpenSelector = (state: AppState) => !!state.portfolio.chartData;\nexport const chartDataSelector = (state: AppState) => state.portfolio.chartData;\n","import React from \"react\";\nimport { PortfolioSummary } from \"./models\";\nimport {\n  Typography,\n  Table,\n  TableBody,\n  TableRow,\n  TableCell\n} from \"@material-ui/core\";\nimport green from \"@material-ui/core/colors/green\";\nimport red from \"@material-ui/core/colors/red\";\nimport { createStyles, WithStyles, withStyles } from \"@material-ui/styles\";\n\nconst styles = createStyles({\n  win: {\n    color: green[700]\n  },\n  loss: {\n    color: red[700]\n  }\n});\n\nexport interface PortfolioSummaryStateProps {\n  summary?: PortfolioSummary;\n}\n\nconst PortfolioSummaryComponent: React.FC<PortfolioSummaryStateProps &\n  WithStyles<typeof styles>> = ({ summary, classes }) => {\n  if (summary === undefined) {\n    return null;\n  }\n\n  return (\n    <>\n      <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n        Summary\n      </Typography>\n      <Table>\n        <TableBody>\n          <TableRow>\n            <TableCell> Total P/L:</TableCell>\n            <TableCell\n              align=\"right\"\n              className={summary.TotalPL < 0 ? classes.loss : classes.win}\n            >\n              ${(summary.TotalPL * 100).toFixed(2)}\n            </TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nexport default withStyles(styles)(PortfolioSummaryComponent);\n","import { connect } from \"react-redux\";\nimport { AppState } from \"../store\";\nimport { filteredPortfolioSummary } from './portfolio.selector';\nimport PortfolioSummaryComponent, { PortfolioSummaryStateProps } from './PortfolioSummary.component';\n\nconst mapStateToProps = (state: AppState): PortfolioSummaryStateProps => ({\n    summary: filteredPortfolioSummary(state)\n})\n\nexport default connect<PortfolioSummaryStateProps, {}, {}, AppState>(\n    mapStateToProps\n)(PortfolioSummaryComponent);","import React from \"react\";\nimport { FormControl, FormLabel } from \"@material-ui/core\";\n\nexport interface FilterProps {\n  label: string;\n}\n\nconst Filter: React.FC<FilterProps> = ({ label, children }) => {\n  return (\n    <FormControl component=\"fieldset\">\n      <FormLabel component=\"legend\">{label}</FormLabel>\n      {children}\n    </FormControl>\n  );\n};\n\nexport default Filter;\n","import React from \"react\";\nimport Filter, { FilterProps } from \"./Filter.component\";\nimport { RadioGroup, FormControlLabel, Radio } from \"@material-ui/core\";\n\nexport interface RadioFilterProps extends FilterProps {\n  prefix: string;\n  options: {\n    [key: string]: number;\n  };\n}\n\nexport interface RadioFilterStateProps {\n  selectedValue: number;\n}\n\nexport interface RadioFilterDispatchProps {\n  onSelected(value: number): void;\n}\n\nconst RadioFilter: React.FC<RadioFilterProps &\n  RadioFilterStateProps &\n  RadioFilterDispatchProps> = ({\n  prefix,\n  options,\n  selectedValue,\n  onSelected,\n  ...props\n}) => {\n  return (\n    <Filter {...props}>\n      <RadioGroup\n        aria-label=\"gender\"\n        name=\"gender1\"\n        value={selectedValue}\n        onChange={event => onSelected(+event.target.value)}\n      >\n        {Object.keys(options).map(key => (\n          <FormControlLabel\n            key={key}\n            value={options[key]}\n            control={<Radio />}\n            label={key}\n          />\n        ))}\n      </RadioGroup>\n    </Filter>\n  );\n};\n\nexport default RadioFilter;\n","import { AppState } from '../store';\n\nexport const dateFilterSelector = (state: AppState) => state.filters.dateFilter;\n\nexport const positionFilterSelector = (state: AppState) => state.filters.positionFilter;\n","import { AppAction } from '../actions';\nimport { DateFilter, PositionFilter } from './filters.models';\n\nexport enum FILTERS_ACTIONS {\n    DATE_FILTER_SELECTED = \"FILTERS/DATE_FILTER_SELECTED\",\n    POSITION_FILTER_SELECTED = \"FILTERS/POSITION_FILTER_SELECTED\",\n}\n\nexport const dateFilterSelectedAction: AppAction<FILTERS_ACTIONS.DATE_FILTER_SELECTED, DateFilter> = (payload) => ({\n    type: FILTERS_ACTIONS.DATE_FILTER_SELECTED,\n    payload\n});\n\nexport const positionFilterSelectedAction: AppAction<FILTERS_ACTIONS.POSITION_FILTER_SELECTED, PositionFilter> = (payload) => ({\n    type: FILTERS_ACTIONS.POSITION_FILTER_SELECTED,\n    payload\n});\n\nexport type FILTERS_ACTION_TYPES = ReturnType<typeof dateFilterSelectedAction> | ReturnType<typeof positionFilterSelectedAction>;","import { Report } from \"../models\";\nimport { AppAction } from '../actions';\n\nexport enum IMPORT_ACTIONS {\n    HISTORY_LOADED = \"IMPORT/HISTORY_LOADED\",\n    REPORT_LOADED_FROM_HISTORY = \"IMPORT/REPORT_LOADED_FROM_HISTORY\",\n}\n\nexport const historyLoadedAction: AppAction<IMPORT_ACTIONS.HISTORY_LOADED, string[]> = (history) => ({\n    type: IMPORT_ACTIONS.HISTORY_LOADED,\n    payload: history\n});\n\nexport const reportLoadedFromHistoryAction: AppAction<IMPORT_ACTIONS.REPORT_LOADED_FROM_HISTORY, Report> = (report) => ({\n    type: IMPORT_ACTIONS.REPORT_LOADED_FROM_HISTORY,\n    payload: report\n});\n\nexport type IMPORT_ACTION_TYPES = ReturnType<typeof historyLoadedAction> | ReturnType<typeof reportLoadedFromHistoryAction>;","import { AppAction } from '../actions';\nimport { Report, TradeGroup } from '../models';\n\nexport enum PORTFOLIO_ACTIONS {\n    PORTFOLIO_FILTERED,\n    OPEN_CHART,\n    CLOSE_CHART,\n}\n\nexport const portfolioFilteredAction: AppAction<PORTFOLIO_ACTIONS.PORTFOLIO_FILTERED, Report> = (payload) => ({\n    type: PORTFOLIO_ACTIONS.PORTFOLIO_FILTERED,\n    payload\n});\n\nexport const openChart: AppAction<PORTFOLIO_ACTIONS.OPEN_CHART, TradeGroup> = (payload) => ({\n    type: PORTFOLIO_ACTIONS.OPEN_CHART,\n    payload\n});\n\nexport const closeChart: AppAction<PORTFOLIO_ACTIONS.CLOSE_CHART> = () => ({\n    type: PORTFOLIO_ACTIONS.CLOSE_CHART,\n    payload: undefined\n});\n\nexport type PORTFOLIO_ACTION_TYPES = ReturnType<typeof portfolioFilteredAction>\n    | ReturnType<typeof openChart>\n    | ReturnType<typeof closeChart>;","import { Report, TradeGroup } from '../models';\nimport { AppActionTypes } from '../actions';\nimport { IMPORT_ACTIONS } from '../import/import.actions';\nimport { PORTFOLIO_ACTIONS } from './portfolio.actions';\n\ninterface PortfolioState {\n    portfolio?: Report;\n    filteredPortfolio?: Report;\n    chartData?: TradeGroup;\n}\n\nconst initialState: PortfolioState = {\n    portfolio: undefined,\n    filteredPortfolio: undefined,\n    chartData: undefined\n};\n\nexport default function (state = initialState, action: AppActionTypes): PortfolioState {\n    switch (action.type) {\n        case IMPORT_ACTIONS.REPORT_LOADED_FROM_HISTORY: {\n            return {\n                ...initialState,\n                portfolio: action.payload,\n                filteredPortfolio: action.payload,\n            };\n        }\n        case PORTFOLIO_ACTIONS.PORTFOLIO_FILTERED: {\n            return {\n                ...state,\n                filteredPortfolio: action.payload\n            }\n        }\n        case PORTFOLIO_ACTIONS.OPEN_CHART: {\n            return {\n                ...state,\n                chartData: action.payload\n            }\n        }\n        case PORTFOLIO_ACTIONS.CLOSE_CHART: {\n            return {\n                ...state,\n                chartData: undefined\n            }\n        }\n        default:\n            return state;\n    }\n}\n","import { AppActionTypes } from '../actions';\nimport { DateFilter, PositionFilter } from './filters.models';\nimport { FILTERS_ACTIONS } from './filters.actions';\nimport { IMPORT_ACTIONS } from '../import/import.actions';\n\nexport interface FiltersState {\n    dateFilter: DateFilter,\n    positionFilter: PositionFilter\n}\n\nconst initialState: FiltersState = {\n    dateFilter: DateFilter.All,\n    positionFilter: PositionFilter.All\n};\n\nexport default function (state = initialState, action: AppActionTypes): FiltersState {\n    switch (action.type) {\n        case FILTERS_ACTIONS.DATE_FILTER_SELECTED: {\n            return {\n                ...state,\n                dateFilter: action.payload\n            }\n        }\n        case FILTERS_ACTIONS.POSITION_FILTER_SELECTED: {\n            return {\n                ...state,\n                positionFilter: action.payload\n            }\n        }\n        case IMPORT_ACTIONS.REPORT_LOADED_FROM_HISTORY:{\n            return initialState;\n        }\n        default:\n            return state;\n    }\n}\n","import { AppActionTypes } from '../actions';\nimport { IMPORT_ACTIONS } from './import.actions';\n\ninterface ImportHistoryState {\n    history: string[]\n}\n\nconst initialState: ImportHistoryState = {\n    history: [],\n};\n\nexport default function (state = initialState, action: AppActionTypes): ImportHistoryState {\n    switch (action.type) {\n        case IMPORT_ACTIONS.HISTORY_LOADED: {\n            return {\n                ...state,\n                history: action.payload\n            }\n        }\n        default:\n            return state;\n    }\n}\n","import { createStore, combineReducers } from \"redux\";\nimport portfolio from './portfolio/portfolio.reducer';\nimport filters from './filters/filters.reducer';\nimport importHistory from './import/importHistory.reducer';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nexport const rootReducer = combineReducers({\n    portfolio,\n    importHistory,\n    filters\n});\n\nexport type AppState = ReturnType<typeof rootReducer>\n\nexport default createStore(rootReducer, composeWithDevTools());","import { Trade } from \"../models\";\n\nconst isClosingCombinationWith = (trade: Trade) => (otherTrade: Trade) =>\n    trade.optionType === otherTrade.optionType &&\n    trade.strikePrice === otherTrade.strikePrice &&\n    trade.position === (-1 * otherTrade.position);\n\nconst TradesCompareService = {\n    isClosingCombinationWith\n}\nexport default TradesCompareService;","import { TradeGroup } from '../models';\nimport TradesCompareService from './TradesCompare.service';\n\nconst getPLForGroup = (group: TradeGroup): number => {\n    const pl = group.trades.reduce((summary, trade) => {\n        const closingTrade = group.trades.find(TradesCompareService.isClosingCombinationWith(trade));\n\n        if (closingTrade && closingTrade.tradeDate >= trade.tradeDate) {\n            return summary + (-closingTrade.position * Math.abs(closingTrade.tradePrice)) + (-trade.position * Math.abs(trade.tradePrice));\n        }\n\n        return summary;\n    }, 0);\n\n    return pl;\n}\n\nconst setPLForGroup = (group: TradeGroup): TradeGroup => {\n    const pl = getPLForGroup(group);\n\n    return {\n        ...group,\n        pl\n    };\n}\n\nconst PLService = {\n    getPLForGroup,\n    setPLForGroup\n};\n\nexport default PLService;","import { Report, TradeGroup } from '../models';\nimport { DateFilter, PositionFilter } from './filters.models';\nimport { FiltersState } from './filters.reducer';\nimport TradesCompareService from \"../calculations/TradesCompare.service\";\nimport PLService from '../calculations/PL.Service';\n\nexport class FilterService {\n    public applyFilters(reportToFilter: Report, filters: FiltersState): Report {\n        const filtersToApply = [\n            this.filterByDate(filters.dateFilter),\n            this.filterByPosition(filters.positionFilter),\n        ];\n\n        const filteredPortfolio = filtersToApply.reduce((report, filter) => filter(report), reportToFilter)\n\n        return {\n            ...filteredPortfolio,\n            tradeGroups: filteredPortfolio.tradeGroups.map(PLService.setPLForGroup)\n        };\n    }\n\n    private filterByDate = (filter: DateFilter) => (portfolio: Report): Report => {\n        const dateFilters = {\n            [DateFilter.All]: () => true,\n            [DateFilter.Expired]: (tradeGroup: TradeGroup) => tradeGroup.expiration < new Date(),\n            [DateFilter.Open]: (tradeGroup: TradeGroup) => tradeGroup.expiration > new Date(),\n        }\n\n        const filteredPortfolio: Report = {\n            ...portfolio,\n            tradeGroups: portfolio.tradeGroups.filter(dateFilters[filter])\n        };\n\n        return filteredPortfolio;\n    }\n\n    private filterByPosition = (filter: PositionFilter) => (portfolio: Report): Report => {\n        const positionFilters = {\n            [PositionFilter.All]: (tradeGroup: TradeGroup) => tradeGroup,\n            [PositionFilter.Closed]: (tradeGroup: TradeGroup) => {\n                const filteredTrades = tradeGroup.trades\n                    .filter(trade => tradeGroup.trades.find(TradesCompareService.isClosingCombinationWith(trade)))\n\n                return {\n                    ...tradeGroup,\n                    trades: filteredTrades\n                }\n            },\n            [PositionFilter.Open]: (tradeGroup: TradeGroup) => {\n                const filteredTrades = tradeGroup.trades\n                    .filter(trade => !tradeGroup.trades.find(TradesCompareService.isClosingCombinationWith(trade)))\n\n                return {\n                    ...tradeGroup,\n                    trades: filteredTrades\n                }\n            }\n        }\n\n        const filteredPortfolio: Report = {\n            ...portfolio,\n            tradeGroups: portfolio.tradeGroups\n                .map(positionFilters[filter])\n                .filter(tg => tg.trades.length > 0)\n        };\n\n        return filteredPortfolio;\n    }\n}","export enum OptionType {\n    Call = 1,\n    Put = 2\n}\nexport interface Trade {\n    underlying: string;\n    position: number;\n    expiration: Date;\n    optionType: OptionType;\n    strikePrice: number;\n    tradePrice: number; // signed with positions sign\n    pl: number;\n    tradeDate: Date;\n}\n\nexport interface Report {\n    name: string;\n    tradeGroups: TradeGroup[];\n}\n\nexport interface TradeGroup {\n    underlying: string;\n    expiration: Date;\n    trades: Trade[];\n    pl: number;\n}\n","import { Dispatch } from 'redux';\nimport { DateFilter, PositionFilter } from './filters.models';\nimport { dateFilterSelectedAction, positionFilterSelectedAction } from './filters.actions';\nimport { originalPortfolioSelector } from '../portfolio/portfolio.selector';\nimport store from '../store';\nimport { portfolioFilteredAction } from '../portfolio/portfolio.actions';\nimport { FilterService } from './filter.service';\n\nexport const filterByDate = (filter: DateFilter) => (dispatch: Dispatch) => {\n    dispatch(dateFilterSelectedAction(filter));\n\n    applyFilters(dispatch);\n}\n\nexport const filterByPosition = (filter: PositionFilter) => (dispatch: Dispatch) => {\n    dispatch(positionFilterSelectedAction(filter));\n\n    applyFilters(dispatch);\n}\n\n\nconst filterService = new FilterService();\nconst applyFilters = (dispatch: Dispatch) => {\n    const portfolio = originalPortfolioSelector(store.getState());\n    \n    if (!portfolio) {\n        return;\n    }\n\n    const filtersState = store.getState().filters;\n    const filteredPortfolio = filterService.applyFilters(portfolio, filtersState);\n   \n    dispatch(portfolioFilteredAction(filteredPortfolio));\n}","import { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport RadioFilter, {\n  RadioFilterStateProps,\n  RadioFilterDispatchProps\n} from \"./RadioFilter.component\";\nimport React from \"react\";\nimport { DateFilter } from \"./filters.models\";\nimport { dateFilterSelector } from \"./filters.selectors\";\nimport { AppState } from \"../store\";\nimport { filterByDate } from \"./filters.actioncreators\";\n\nconst mapStateToProps = (state: AppState): RadioFilterStateProps => ({\n  selectedValue: dateFilterSelector(state) as number\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): RadioFilterDispatchProps => ({\n  onSelected: (value: number) => {\n    filterByDate(value as DateFilter)(dispatch);\n  }\n});\n\nconst dateOptions = {\n  All: DateFilter.All,\n  Expired: DateFilter.Expired,\n  Open: DateFilter.Open\n};\n\nconst DateFilterComponent: React.FC<\n  RadioFilterStateProps & RadioFilterDispatchProps\n> = ({ ...props }) => (\n  <RadioFilter prefix={'date'} label={\"By Date\"} options={dateOptions} {...props} />\n);\n\nexport default connect<\n  RadioFilterStateProps,\n  RadioFilterDispatchProps,\n  {},\n  AppState\n>(\n  mapStateToProps,\n  mapDispatchToProps\n)(DateFilterComponent);\n","import { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport RadioFilter, {\n  RadioFilterStateProps,\n  RadioFilterDispatchProps\n} from \"./RadioFilter.component\";\nimport React from \"react\";\nimport { PositionFilter } from \"./filters.models\";\nimport { AppState } from \"../store\";\nimport { positionFilterSelector } from \"./filters.selectors\";\nimport { filterByPosition } from \"./filters.actioncreators\";\n\nconst mapStateToProps = (state: AppState): RadioFilterStateProps => ({\n  selectedValue: positionFilterSelector(state) as number\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): RadioFilterDispatchProps => ({\n  onSelected: (value: number) => {\n    filterByPosition(value as PositionFilter)(dispatch);\n  }\n});\n\nconst positionOptions = {\n  All: PositionFilter.All,\n  Closed: PositionFilter.Closed,\n  Open: PositionFilter.Open\n};\n\nconst PositionFilterComponent: React.FC<\n  RadioFilterStateProps & RadioFilterDispatchProps\n> = ({ ...props }) => (\n  <RadioFilter\n    prefix={\"position\"}\n    label={\"By Position\"}\n    options={positionOptions}\n    {...props}\n  />\n);\n\nexport default connect<\n  RadioFilterStateProps,\n  RadioFilterDispatchProps,\n  {},\n  AppState\n>(\n  mapStateToProps,\n  mapDispatchToProps\n)(PositionFilterComponent);\n","import React from \"react\";\nimport DateFilter from \"./DateFilter.container\";\nimport PositionFilter from \"./PositionFilter.container\";\nimport \"./filters.scss\";\nimport { Grid, Typography } from \"@material-ui/core\";\n\nconst Filters: React.FC = () => {\n  return (\n    <>\n      <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n        Filters\n      </Typography>\n      <Grid container spacing={2}>\n        <Grid item xs={4}>\n          <DateFilter />\n        </Grid>\n        <Grid item xs={4}>\n          <PositionFilter />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default Filters;\n","import React, { useEffect } from \"react\";\nimport {\n  Grid,\n  Typography,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  IconButton\n} from \"@material-ui/core\";\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { createStyles, WithStyles, withStyles } from \"@material-ui/styles\";\nimport red from \"@material-ui/core/colors/red\";\nimport { blue } from \"@material-ui/core/colors\";\n\nconst styles = createStyles({\n  delete: {\n    \"&:hover\": {\n      color: red[700]\n    }\n  },\n  open: {\n    \"&:hover\": {\n      color: blue[700]\n    }\n  }\n});\n\nexport interface ImportHistoryStateProps {\n  history: string[];\n}\n\nexport interface ImportHistoryDispatchProps {\n  importFromHistory(reportKey: string): void;\n  deleteFromHistory(reportKey: string): void;\n  loadHistory(): void;\n}\n\nconst ImportHistory: React.FC<ImportHistoryStateProps &\n  ImportHistoryDispatchProps &\n  WithStyles<typeof styles>> = ({\n    history,\n    importFromHistory,\n    loadHistory,\n    deleteFromHistory,\n    classes\n  }) => {\n    useEffect(() => {\n      loadHistory();\n    }, [loadHistory]);\n\n    return (\n      <Grid>\n        <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n          Imported reports\n      </Typography>\n        <List component=\"nav\" aria-label=\"Main mailbox folders\">\n          {history.map(key => (\n            <ListItem button onClick={() => importFromHistory(key)} key={key}>\n              <ListItemIcon>\n                <IconButton title=\"Open report\" className={classes.open}>\n                  <FolderOpenIcon />\n                </IconButton>\n              </ListItemIcon>\n              <ListItemText primary={key} />\n              <IconButton\n                title=\"Delete imported report\"\n                className={classes.delete}\n                onClick={event => {\n                  deleteFromHistory(key);\n                  event.stopPropagation();\n                }}\n              >\n                <DeleteIcon />\n              </IconButton>\n            </ListItem>\n          ))}\n        </List>\n      </Grid>\n    );\n  };\n\nexport default withStyles(styles)(ImportHistory);\n","const HISTORY_KEY = \"savedImports\";\n\ninterface History {\n  rawImports: { [key: string]: string };\n}\n\nexport class ImportHistoryService {\n  private getSavedHistory(): History {\n    const savedReports = localStorage.getItem(HISTORY_KEY);\n    if (savedReports) {\n      return JSON.parse(savedReports) as History;\n    } else {\n      return {\n        rawImports: {}\n      };\n    }\n  }\n\n  private saveHistory(history: History) {\n    const serializedHistory = JSON.stringify(history);\n    localStorage.setItem(HISTORY_KEY, serializedHistory);\n  }\n\n  public GetRawImportKeys() {\n    const history = this.getSavedHistory();\n\n    return Object.keys(history.rawImports);\n  }\n\n  public GetRawImport(key: string) {\n    const history = this.getSavedHistory();\n\n    return history.rawImports[key];\n  }\n\n  public SaveRawImport(raw: string) {\n    const history = this.getSavedHistory();\n\n    const dateAsKey = new Date().getUTCMilliseconds().toString();\n    history.rawImports[dateAsKey] = raw;\n\n    this.saveHistory(history);\n  }\n\n  public DeleteReport(key: string) {\n    const history = this.getSavedHistory();\n\n    if (!history.rawImports[key]) {\n      throw Error(`Key not found in saved history: ${key}`);\n    }\n\n    delete history.rawImports[key];\n\n    this.saveHistory(history);\n  }\n}\n","import { IParser } from './IParser.service';\nimport { Report, Trade, TradeGroup } from '../../models';\nimport PLService from '../../calculations/PL.Service';\n\nexport abstract class ParserBase implements IParser {\n    private rawImport: string = \"\";\n\n    public Parse(file: File): Promise<string> {\n        let resolve: (raw: string) => void;\n        let reject: (error: string) => void;\n\n        this.rawImport = \"\";\n\n        const result = new Promise<string>(\n            (_resolve: (raw: string) => void, _reject) => {\n                [resolve, reject] = [_resolve, _reject];\n            }\n        );\n\n        console.debug(`Parsing ${file.name}...`);\n\n        var reader = new FileReader();\n\n        reader.onload = () => {\n            console.debug(\"File loaded.\");\n            const rawCsv = reader.result as string;\n            this.rawImport = rawCsv;\n\n            try {\n                resolve(this.rawImport);\n            } catch {\n                this.rawImport = \"\";\n                reject(\"Error while parsing...\");\n            }\n        };\n\n        reader.readAsBinaryString(file);\n\n        return result;\n    }\n\n    protected getGroupsFromTrades(trades: Trade[]) {\n        const mapByUnderlyingAndExpiration = trades.reduce((map, trade) => {\n            const { expiration, underlying } = trade;\n            const key = `${underlying} - ${expiration.toLocaleDateString()}`;\n\n            if (!map[key]) {\n                map[key] = {\n                    underlying,\n                    expiration,\n                    trades: [],\n                    pl: 0\n                };\n            }\n\n            map[key].trades.push(trade);\n\n            return map;\n        }, {} as { [key: string]: TradeGroup })\n\n        return Object.values(mapByUnderlyingAndExpiration)\n            .sort((a, b) => +a.expiration - +b.expiration)\n            .map(group => { group.trades.sort((a,b) => +a.tradeDate - +b.tradeDate); return group; })\n            .map(PLService.setPLForGroup);\n    }\n\n    public ParseRawData(rawText: string): Report {\n        const myTrades = this.ParseMyTrades(rawText);\n\n        const tradeGroups = this.getGroupsFromTrades(myTrades);\n\n        return {\n            name: \"ok\",\n            tradeGroups,\n        };\n    }\n\n    protected abstract ParseMyTrades(rawText: string): Trade[];\n}","import { ParserBase } from './ParserBase.service';\nimport { Trade, OptionType } from '../../models';\n\nexport class FlexQueryParserService extends ParserBase {\n    protected ParseMyTrades(rawText: string): Trade[] {\n        const parser = new DOMParser();\n        const xmlDoc = parser.parseFromString(rawText, \"text/xml\");\n\n        const trades: Trade[] = Array.from(xmlDoc.getElementsByTagName('Trade')).map(tradeElement => {\n            const expiry = tradeElement.getAttribute('expiry')!;\n            const tradeDate = tradeElement.getAttribute('tradeDate')!;\n            const position = parseInt(tradeElement.getAttribute('quantity')!);\n\n            const trade: Trade = {\n                underlying: tradeElement.getAttribute('underlyingSymbol')!,\n                position,\n                expiration: new Date(+expiry.substr(0, 4), +expiry.substr(4, 2) - 1, +expiry.substr(6, 2)),\n                optionType: tradeElement.getAttribute('putCall') === 'P' ? OptionType.Put : OptionType.Call,\n                strikePrice: +tradeElement.getAttribute('strike')!,\n                pl: 0,\n                tradePrice: (position < 0 ? -1 : 1) * (+tradeElement.getAttribute('tradePrice')!),\n                tradeDate: new Date(+tradeDate.substr(0, 4), +tradeDate.substr(4, 2) - 1, +tradeDate.substr(6, 2)),\n            }\n\n            return trade;\n        });\n\n        return trades;\n    }\n}","import { Dispatch } from \"redux\";\nimport { ImportHistoryService } from './ImportHistory.service';\nimport { reportLoadedFromHistoryAction, historyLoadedAction } from './import.actions';\nimport { IParser } from './Parser/IParser.service';\nimport { FlexQueryParserService } from './Parser/FlexQueryParser.service';\n\nconst importHistoryService = new ImportHistoryService();\nconst reportParserService: IParser = new FlexQueryParserService();\n\nexport const loadReport = (reportKey: string) => (dispatch: Dispatch) => {\n    const rawImport = importHistoryService.GetRawImport(reportKey);\n    const report = reportParserService.ParseRawData(rawImport);\n\n    return dispatch(reportLoadedFromHistoryAction(report));\n}\n\nexport const deleteReport = (reportKey: string) => (dispatch: Dispatch) => {\n    importHistoryService.DeleteReport(reportKey);\n\n    return loadHistory()(dispatch);\n}\n\nexport const loadHistory = () => (dispatch: Dispatch) => {\n    const history = importHistoryService.GetRawImportKeys();\n\n    return dispatch(historyLoadedAction(history));\n}\n\nexport const importFile = (file: File) => async (dispatch: Dispatch) => {\n    const rawImport = await reportParserService.Parse(file);\n    importHistoryService.SaveRawImport(rawImport);\n    loadHistory()(dispatch);\n}","import { AppState } from '../store';\n\nexport const importHistorySelector = (state: AppState) => state.importHistory.history;","import { connect } from \"react-redux\";\nimport { AppState } from \"../store\";\nimport ImportHistory, { ImportHistoryDispatchProps, ImportHistoryStateProps } from './ImportHistory.component';\nimport { Dispatch } from 'redux';\nimport { loadReport, loadHistory, deleteReport } from './import.actioncreators';\nimport { importHistorySelector } from \"./import.selectors\";\n\nconst mapStateToProps = (state: AppState): ImportHistoryStateProps => ({\n  history: importHistorySelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): ImportHistoryDispatchProps => ({\n  importFromHistory: (key: string) => { loadReport(key)(dispatch) },\n  deleteFromHistory: (key: string) => { deleteReport(key)(dispatch) },\n  loadHistory: ()=> loadHistory()(dispatch)\n})\n\nexport default connect<ImportHistoryStateProps, ImportHistoryDispatchProps, \n{}, AppState>(\n  mapStateToProps, mapDispatchToProps\n)(ImportHistory);","import React, { useState } from \"react\";\nimport {\n  Button,\n  WithStyles,\n  createStyles,\n  withStyles,\n  TextField\n} from \"@material-ui/core\";\n\nconst styles = () =>\n  createStyles({\n    input: {\n      display: \"none\"\n    }\n  });\n\nexport interface FileUploadProps {\n  upload(file: File): void;\n}\n\nconst FileUploadComponent: React.FC<FileUploadProps &\n  WithStyles<typeof styles>> = ({ upload, classes }) => {\n  const [file, setFile] = useState<FileList | null>();\n\n  const onImport = () => {\n    if (!file || file.length !== 1) {\n      alert(\"please provide a single file!\");\n      return;\n    }\n\n    upload(file[0]);\n  };\n\n  return (\n    <>\n      <input\n        className={classes.input}\n        id=\"raised-button-file\"\n        type=\"file\"\n        onChange={e => setFile(e.target.files)}\n      />\n      <TextField\n        value={file && file.length ? file[0].name : undefined}\n        placeholder=\"No file chosen\"\n      />\n\n      <label htmlFor=\"raised-button-file\">\n        <Button component=\"span\">Select file</Button>\n      </label>\n      {file && file.length ? (\n        <Button onClick={() => onImport()} color=\"primary\" variant=\"contained\">\n          Import\n        </Button>\n      ) : null}\n    </>\n  );\n};\n\nexport default withStyles(styles)(FileUploadComponent);\n","import React from \"react\";\nimport { Grid, Typography, Button } from \"@material-ui/core\";\nimport FileUploadComponent from \"./FileUpload.component\";\n\nexport interface ImportDispatchProps {\n  importFile(file: File): void;\n}\n\nconst Import: React.FC<ImportDispatchProps> = ({ importFile }) => {\n  const importFileFromPath = (filepath: string) => {\n    let xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", filepath);\n    xhr.responseType = \"blob\";\n    xhr.onload = function () {\n      importFile(xhr.response);\n    };\n    xhr.send();\n  }\n\n  const onImportExample = () => {\n    importFileFromPath(\"example.xml\")\n  };\n  const onImportMock = () => {\n    importFileFromPath(\"mock.xml\");\n  };\n\n  return (\n    <>\n      <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n        Import flex query\n      </Typography>\n      <Grid container spacing={1}>\n        <Grid item xs={12}>\n          <FileUploadComponent upload={importFile} />\n        </Grid>\n        <Grid item xs={12}>\n          If you have no flex queries exported yet:&nbsp;\n          <Button\n            onClick={() => onImportExample()}\n            color=\"primary\"\n            variant=\"contained\"\n          >\n            Load example\n          </Button>\n          &nbsp;or&nbsp;\n          <Button\n            onClick={() => onImportMock()}\n            color=\"primary\"\n            variant=\"contained\"\n          >\n            Load mock\n          </Button>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default Import;\n","import { connect } from \"react-redux\";\nimport { AppState } from \"../store\";\nimport { Dispatch } from 'redux';\nimport Import, { ImportDispatchProps } from './Import.component';\nimport { importFile } from \"./import.actioncreators\";\n\nconst mapDispatchToProps = (dispatch: Dispatch): ImportDispatchProps => ({\n  importFile: (file) => importFile(file)(dispatch)\n})\n\nexport default connect<{}, ImportDispatchProps, {}, AppState>(\n  null, mapDispatchToProps\n)(Import);\n","export const columns = [\n  'action',\n  'underlying',\n  'optionType',\n  'strikePrice',\n  'position',\n  'price',\n  'pl',\n  'tradeDate',\n  'expiration',\n  'remainingDays'\n] as const;\n\nexport type columns = typeof columns[number]; // Thanks typescript 3.4 !!!\n\nexport interface PortfolioSummary {\n  TotalPL: number;\n}","import React from \"react\";\nimport { columns } from \"../models\";\nimport { TableHead, TableCell, TableRow } from \"@material-ui/core\";\n\nconst columnTitles: { [key in columns]: string } = {\n  action: \"\",\n  underlying: \"Underlying\",\n  strikePrice: \"Strike Price\",\n  optionType: \"Option Type\",\n  position: \"Position\",\n  expiration: \"Expiration\",\n  price: \"Trade Price\",\n  pl: \"Realized P/L\",\n  tradeDate: \"Trade date\",\n  remainingDays: \"Remaining days\"\n};\n\nconst TradeHeader: React.FC = () => {\n  return (\n    <TableHead>\n      <TableRow>\n        {columns.map(column => (\n          <TableCell key={column}>{columnTitles[column]}</TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n};\n\nexport default TradeHeader;\n","import React from \"react\";\nimport {\n  TableCell,\n  createStyles,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport { green, red } from \"@material-ui/core/colors\";\nimport clsx from 'clsx';\n\nconst colorDepth = 700;\nconst styles = createStyles({\n  badge: {\n    borderRadius: 3,\n    padding: '2px 5px',\n    marginRight: 5\n  },\n  win: {\n    background: green[colorDepth],\n    color: \"white\"\n  },\n  loss: {\n    background: red[colorDepth],\n    color: \"white\"\n  }\n});\n\nexport interface PriceColumnProps {\n  price: number;\n}\n\nconst PriceColumn: React.FC<PriceColumnProps & WithStyles<typeof styles>> = ({\n  price,\n  classes\n}) => {\n  return (\n    <TableCell>\n      <span className={clsx(classes.badge, price > 0 ? classes.loss : classes.win)}>\n        {price < 0 ? \"C\" : \"D\"}\n      </span>\n      <span>{price < 0 ? (price * -1).toFixed(2) : price.toFixed(2)}</span>\n    </TableCell>\n  );\n};\n\nexport default withStyles(styles)(PriceColumn);\n","import { OptionType, Trade } from \"../../models\";\nimport React from \"react\";\nimport { columns } from \"../models\";\nimport PriceColumn from \"./PriceColumn.component\";\nimport { TableRow, TableCell } from '@material-ui/core';\n\nexport interface TradeRowProps {\n  trade: Trade;\n}\n\nconst cell = (key: string, node: React.ReactNode) => (\n  <TableCell className={key} key={key}>\n    {node}\n  </TableCell>\n);\n\nconst columnDisplayers: {\n  [key in columns]: (trade: Trade) => React.ReactNode;\n} = {\n  action: () => cell(\"action\", \"\"),\n  underlying: trade => cell(\"underlying\", trade.underlying),\n  optionType: trade =>\n    cell(\n      \"optionType\",\n      trade.optionType === OptionType.Call ? \"CALL\" : \"PUT\"\n    ),\n  strikePrice: trade =>\n    cell(\"strikePrice\", trade.strikePrice.toFixed(1)),\n  position: trade => cell(\"position\", trade.position.toString()),\n  pl: ()=> cell('pl',''),\n  tradeDate: trade => cell('tradeDate', trade.tradeDate.toLocaleDateString()),\n  expiration: trade =>\n    cell(\"expiration\", trade.expiration.toLocaleDateString()),\n  price: trade => <PriceColumn key={\"price\"} price={trade.tradePrice} />,\n  remainingDays: () => cell(\"remainingDays\", \"\")\n};\n\nconst TradeRow: React.FC<TradeRowProps> = ({ trade }) => {\n  return <TableRow>{columns.map(column => columnDisplayers[column](trade))}</TableRow>;\n};\n\nexport default TradeRow;\n","import React from \"react\";\nimport {\n  TableCell,\n  createStyles,\n  WithStyles,\n  withStyles\n} from \"@material-ui/core\";\nimport { green, red } from \"@material-ui/core/colors\";\n\nconst colorDepth = 700;\nconst styles = createStyles({\n  win: {\n    background: green[colorDepth],\n    color: \"white\"\n  },\n  loss: {\n    background: red[colorDepth],\n    color: \"white\"\n  }\n});\n\nexport interface PLColumnProps {\n  pl: number;\n}\n\nconst getPLString = (pl: number) => {\n  const amount = pl * 100;\n  return amount < 0 ? (amount * -1).toFixed(2) : amount.toFixed(2);\n};\n\nconst PLColumn: React.FC<PLColumnProps & WithStyles<typeof styles>> = ({\n  pl,\n  classes\n}) => {\n  return (\n    <TableCell\n      align=\"right\"\n      className={pl > 0 ? classes.win : pl < 0 ? classes.loss : \"\"}\n    >\n      {getPLString(pl)} $\n    </TableCell>\n  );\n};\n\nexport default withStyles(styles)(PLColumn);\n","import { TradeGroup } from \"../../models\";\nimport React, { useState } from \"react\";\nimport { columns } from \"../models\";\nimport TradeRow from \"./TradeRow.component\";\nimport PriceColumn from \"./PriceColumn.component\";\nimport { TableRow, TableCell, IconButton, Theme } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport BarChartIcon from \"@material-ui/icons/BarChart\";\nimport { withStyles, createStyles, WithStyles } from \"@material-ui/styles\";\nimport clsx from 'clsx';\nimport { grey, green } from '@material-ui/core/colors';\nimport PLColumn from \"./PLColumn.component\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    icon: {\n      padding: 0,\n    },\n    expand: {\n      transform: \"rotate(0deg)\",\n      transition: theme.transitions.create(\"transform\", {\n        duration: theme.transitions.duration.shortest\n      })\n    },\n    expandOpen: {\n      transform: \"rotate(180deg)\"\n    },\n    groupRow: {\n      background: grey[300]\n    },\n    chartIcon: {\n      \"&:hover\": {\n        color: green[700]\n      }\n    }\n  });\n\nexport interface TradeGroupRowOwnProps {\n  tradeGroup: TradeGroup;\n}\n\nexport interface TradeGroupRowDispatchProps {\n  showChart: (tradeGroup: TradeGroup) => void;\n}\n\ninterface CollapseableTradeGroup extends TradeGroup {\n  isOpen: boolean;\n}\n\nconst getRemainingDays = (date: Date): string => {\n  const now = new Date();\n\n  const remainingDays = Math.floor(\n    (Number(date) - Number(now)) / 1000 / 60 / 60 / 24\n  );\n\n  return remainingDays < 0 ? \"EXPIRED\" : remainingDays.toString();\n};\n\nconst cell = (key: string, child: React.ReactNode) => (\n  <TableCell key={key} className={key}>\n    {child}\n  </TableCell>\n);\nconst empty = (key: string) => (_tradeGroup: TradeGroup) => cell(key, \"\");\n\nconst TradeGroupRow: React.FC<TradeGroupRowOwnProps & TradeGroupRowDispatchProps &\n  WithStyles<typeof styles>> = ({ tradeGroup, classes, showChart }) => {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const toggleIsOpen = () => {\n      setIsOpen(!isOpen);\n    };\n\n    const columnDisplayers: {\n      [key in columns]: (tradeGroup: CollapseableTradeGroup) => React.ReactNode;\n    } = {\n      action: tradeGroup =>\n        cell(\n          \"action\",\n          <>\n            <IconButton\n              title={tradeGroup.isOpen ? \"Collapse trades\" : \"Show trades\"}\n              onClick={() => toggleIsOpen()}\n              className={clsx(classes.icon, classes.expand, {\n                [classes.expandOpen]: tradeGroup.isOpen\n              })}\n            >\n              <ExpandMoreIcon />\n            </IconButton>\n            <IconButton\n              title=\"Draw on chart\"\n              className={clsx(classes.icon, classes.chartIcon)}\n              onClick={() => showChart(tradeGroup)}\n            >\n              <BarChartIcon />\n            </IconButton>\n          </>\n        ),\n      underlying: tradeGroup => cell(\"underlying\", tradeGroup.underlying),\n      optionType: empty(\"optionType\"),\n      strikePrice: empty(\"strikePrice\"),\n      position: empty(\"position\"),\n      price: tradeGroup => (\n        <PriceColumn\n          key={\"price\"}\n          price={tradeGroup.trades.reduce(\n            (sum, trade) => (sum += trade.tradePrice),\n            0\n          )}\n        />\n      ),\n      pl: tradeGroup => (\n        <PLColumn\n          key={\"pl\"}\n          pl={tradeGroup.pl}\n        />\n      ),\n      tradeDate: empty('tradeDate'),\n      expiration: tradeGroup =>\n        cell(\"expiration\", tradeGroup.expiration.toLocaleDateString()),\n      remainingDays: tradeGroup =>\n        cell(\"remainingDays\", getRemainingDays(tradeGroup.expiration))\n    };\n\n    const group: CollapseableTradeGroup = { ...tradeGroup, isOpen };\n\n    return (\n      <>\n        <TableRow className={classes.groupRow}>\n          {columns.map(column => columnDisplayers[column](group))}\n        </TableRow>\n        {isOpen\n          ? tradeGroup.trades.map((trade, i) => (\n            <TradeRow trade={trade} key={i} />\n          ))\n          : null}\n      </>\n    );\n  };\n\nexport default withStyles(styles)(TradeGroupRow);\n","import { connect } from \"react-redux\";\nimport TradeGroupRowComponent from \"./TradeGroupRow.component\";\nimport { TradeGroupRowDispatchProps, TradeGroupRowOwnProps } from './TradeGroupRow.component';\nimport { Dispatch } from \"redux\";\nimport { AppState } from \"../../store\";\nimport { openChart } from '../portfolio.actions';\nimport { TradeGroup } from '../../models';\n\nconst mapDispatchToProps = (dispatch: Dispatch): TradeGroupRowDispatchProps => ({\n    showChart: (tradeGroup: TradeGroup) => { dispatch(openChart(tradeGroup)) }\n})\n\nexport default connect<{}, TradeGroupRowDispatchProps, TradeGroupRowOwnProps, AppState>(\n    null,\n    mapDispatchToProps\n)(TradeGroupRowComponent);","import React from \"react\";\nimport { Report } from \"../../models\";\nimport TradeHeader from \"./TradeHeader.component\";\nimport TradeGroupRow from \"./TradeGroupRow.container\";\nimport { Table, TableBody } from \"@material-ui/core\";\n\nexport interface PortfolioTableProps {\n  report: Report;\n}\n\nconst PortfolioTableComponent: React.FC<PortfolioTableProps> = ({ report }) => (\n  <Table size=\"small\">\n    <TradeHeader />\n    <TableBody>\n      {report.tradeGroups.map((group, i) => (\n        <TradeGroupRow tradeGroup={group} key={i}/>\n      ))}\n    </TableBody>\n  </Table>\n);\n\nexport default PortfolioTableComponent;\n","import { TradeGroup, OptionType, Trade } from '../models';\n\nexport interface ChartPoints {\n    points: [number, number][]\n}\n\nfunction getTradePLAtExpiry(underLyingPrice: number, trade: Trade): number {\n    const isCall = trade.optionType === OptionType.Call;\n    const isOverStrikePrice = trade.strikePrice < underLyingPrice;\n    const tradeAbsPrice = Math.abs(trade.tradePrice);\n\n    const isFixed = (isCall && !isOverStrikePrice) || (!isCall && isOverStrikePrice);\n\n    if (isFixed) {\n        return -trade.position * tradeAbsPrice * 100;\n    } else {\n        return trade.position * ((-1 * tradeAbsPrice * 100) + ((trade.strikePrice - underLyingPrice) * 100 * (trade.optionType === OptionType.Call ? -1 : 1)))\n    }\n}\n\nfunction getGroupPLAtExpiry(underLyingPrice: number, tradeGroup: TradeGroup): number {\n    return tradeGroup.trades.reduce((sum, trade) => sum + getTradePLAtExpiry(underLyingPrice, trade), 0)\n}\n\nexport default {\n    getGroupPLAtExpiry,\n    getTradePLAtExpiry\n}","import React from \"react\";\nimport { createStyles, WithStyles, withStyles } from \"@material-ui/styles\";\nimport { TradeGroup, Trade } from '../models';\nimport { Chart } from \"react-google-charts\";\nimport ChartService from \"./Chart.service\";\n\nconst styles = createStyles({\n});\n\nexport interface ChartProps {\n    chartData: TradeGroup;\n    showMainStrategyOnly: boolean;\n}\n\nconst ChartComponent: React.FC<ChartProps & WithStyles<typeof styles>> = ({ chartData, showMainStrategyOnly, classes }) => {\n    const isStrategy = chartData.trades.length > 1;\n\n    const getHeaderFromTrade = (trade: Trade) => `${trade.underlying} ${trade.strikePrice}`;\n\n    const getBoundaries = () => {\n        let from = 0;\n        let to = 0;\n        const tradeGroup = chartData;\n\n        if (tradeGroup.trades.length > 1) {\n            const middlePoint = tradeGroup.trades.reduce((sum, t) => sum + t.strikePrice, 0) / tradeGroup.trades.length;\n            const strikes = tradeGroup.trades.map(t => t.strikePrice);\n            const min = Math.min(...strikes)\n            const max = Math.max(...strikes)\n\n            from = min - ((middlePoint - min) / 2);\n            to = max + ((max - middlePoint) / 2);\n        } else {\n            const distance = Math.abs(tradeGroup.trades[0].tradePrice * 100)\n            from = tradeGroup.trades[0].strikePrice - 2 * distance;\n            to = tradeGroup.trades[0].strikePrice + 2 * distance;\n\n        }\n\n        return [from, to];\n    }\n\n    const getChartPoints = () => {\n        const [from, to] = getBoundaries();\n        const points: number[][] = [];\n\n\n        for (let x = from; x <= to; x += 0.1) {\n            const valuesForX = chartData.trades.map(t => ChartService.getTradePLAtExpiry(x, t));\n            const strategyValue = ChartService.getGroupPLAtExpiry(x, chartData);\n\n            if (showMainStrategyOnly) {\n                points.push([x, strategyValue]);\n            } else if (isStrategy) {\n                points.push([x, ...valuesForX, strategyValue]);\n            } else {\n                points.push([x, ...valuesForX]);\n            }\n        }\n\n        return points;\n    }\n\n    const getHeaders = () => {\n        const headers = ['x'];\n\n        if (showMainStrategyOnly) {\n            headers.push(chartData.trades[0].underlying);\n        } else {\n            headers.push(...chartData.trades.map(getHeaderFromTrade));\n            if (isStrategy) {\n                headers.push('Trade');\n            }\n        }\n\n        return headers;\n    }\n\n    const getSeriesOptions = () => {\n        if (showMainStrategyOnly) {\n            return {};\n        } else {\n            let i = 0;\n            return chartData.trades.reduce((options, _) => {\n                options[i++] = {\n                    lineDashStyle: [2, 2]\n                };\n                return options;\n            }, {} as { [key: number]: any });\n        }\n    }\n\n    return <Chart\n        width={'100%'}\n        height={'300px'}\n        chartType=\"LineChart\"\n        data={[\n            getHeaders(),\n            ...getChartPoints()\n        ]}\n        options={{\n            hAxis: {\n                title: 'Underlying price',\n            },\n            vAxis: {\n                title: 'P/L',\n            },\n            series: getSeriesOptions()\n        }}\n    />\n\n};\n\nexport default withStyles(styles)(ChartComponent);\n","import React, { useState } from \"react\";\nimport { createStyles, WithStyles, withStyles } from \"@material-ui/styles\";\nimport { Typography, IconButton, FormControlLabel, Switch } from \"@material-ui/core\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport { TradeGroup } from '../models';\nimport ChartComponent from \"./Chart.component\";\n\nconst styles = createStyles({\n  backIcon: {\n    padding: 5\n  },\n  controls: {\n    margin: '0 auto',\n    textAlign: 'center'\n  }\n});\n\nexport interface ChartPageStateProps {\n  chartData?: TradeGroup;\n}\n\nexport interface ChartPageDispatchProps {\n  closeChart: () => void;\n}\n\nconst ChartPageComponent: React.FC<ChartPageStateProps & ChartPageDispatchProps & WithStyles<typeof styles>> = ({ chartData, closeChart, classes }) => {\n  if (!chartData) {\n    throw Error('No chart data to show');\n  }\n\n  const [showMainStrategyOnly, setShowMainStrategyOnly] = useState(true);\n\n  return <>\n    <Typography variant=\"h6\" component=\"h2\" color=\"primary\">\n      <IconButton className={classes.backIcon} onClick={() => { closeChart() }}>\n        <ArrowBackIcon />\n      </IconButton>\n      Chart\n    </Typography>\n    <div className={classes.controls}>\n      <FormControlLabel\n        control={\n          <Switch\n            checked={showMainStrategyOnly}\n            onChange={event => setShowMainStrategyOnly(event.target.checked)}\n            value=\"checkedB\"\n            color=\"primary\"\n          />\n        }\n        label=\"Hide legs\"\n      />\n    </div>\n    <ChartComponent chartData={chartData} showMainStrategyOnly={showMainStrategyOnly} />\n  </>\n};\n\nexport default withStyles(styles)(ChartPageComponent);\n","import { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport ChartPageComponent, { ChartPageDispatchProps } from \"./ChartPage.component\";\nimport { AppState } from \"../store\";\nimport { closeChart } from '../portfolio/portfolio.actions';\nimport { ChartPageStateProps } from './ChartPage.component';\nimport { chartDataSelector } from '../portfolio/portfolio.selector';\n\nconst mapStateToProps = (state: AppState): ChartPageStateProps => ({\n    chartData: chartDataSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): ChartPageDispatchProps => ({\n    closeChart: () => { dispatch(closeChart(undefined)) }\n})\n\nexport default connect<ChartPageStateProps, ChartPageDispatchProps, {}, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(ChartPageComponent);","import React from \"react\";\nimport { createStyles, WithStyles, withStyles } from \"@material-ui/styles\";\nimport clsx from 'clsx';\n\nconst styles = createStyles({\n    item: {\n        flexShrink: 0,\n        width: '100%',\n        transition: 'height linear 0.2s, margin ease 0.3s',\n        height: 0\n    },\n    active: {\n        marginLeft: 0,\n        height: 'auto'\n    },\n    offsetLeft: {\n        marginLeft: '-100%'\n    },\n    offsetRight: {\n        marginLeft: '100%'\n    }\n});\n\nexport interface SwitcherItemProps {\n    switcherKey: string,\n    offset?: number\n}\n\nconst SwitcherItemComponent: React.FC<SwitcherItemProps & WithStyles<typeof styles>> = ({ children, offset, classes }) => {\n    return <div className={clsx(classes.item, {\n        [classes.active]: offset === 0,\n        [classes.offsetLeft]: offset && offset < 0,\n        [classes.offsetRight]: offset && offset > 0\n    })}>{children}</div>;\n};\n\nexport default withStyles(styles)(SwitcherItemComponent);\n","import React from \"react\";\nimport { createStyles, WithStyles, withStyles } from \"@material-ui/styles\";\nimport SwitcherItemComponent, { SwitcherItemProps } from './SwitcherItem.component';\n\nconst styles = createStyles({\n    container: {\n        overflow: 'hidden',\n        display: 'flex'\n    }\n});\n\n\nexport interface SwitcherProps {\n    children: React.ReactElement<SwitcherItemProps & HTMLElement>[];\n    activeKey: string;\n}\n\nexport function getOffsetForChildren(index: number, totalCount: number): number {\n    return [-1, 1][index]; // TODO implement for real\n}\n\nconst SwitcherComponent: React.FC<SwitcherProps & WithStyles<typeof styles>> = ({ children, activeKey, classes }) => {\n    const childrenItems = React.Children.toArray(children);\n\n    childrenItems.forEach(child => {\n        const key = child.props.switcherKey;\n\n        if (!key) {\n            throw Error('No key defined in Switcher component child element');\n        }\n    });\n\n    return <div className={classes.container}>{\n        React.Children.map(children, (child, index) =>\n            <SwitcherItemComponent {...child.props} offset={child.props.switcherKey === activeKey ? 0 : getOffsetForChildren(index, childrenItems.length)}>\n                {child.props.children}\n            </SwitcherItemComponent>\n        )\n    }</div>;\n};\n\nexport default withStyles(styles)(SwitcherComponent);\n","import React from \"react\";\nimport { withStyles, createStyles, WithStyles } from \"@material-ui/styles\";\nimport { Theme, Container, Grid, Paper } from \"@material-ui/core\";\nimport PortfolioSummary from \"./portfolio/PortfolioSummary.container\";\nimport Filters from \"./filters/Filters.component\";\nimport ImportHistory from \"./import/ImportHistory.container\";\nimport Import from \"./import/Import.container\";\nimport { Report } from \"./models\";\nimport PortfolioTableComponent from \"./portfolio/table/PortfolioTable.component\";\nimport ChartPage from \"./chart/ChartPage.container\";\nimport SwitcherComponent from \"./switcher/Switcher.component\";\nimport SwitcherItemComponent from \"./switcher/SwitcherItem.component\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\"\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n      flexGrow: 1,\n      height: \"100vh\",\n      overflow: \"auto\"\n    },\n    container: {\n      paddingTop: theme.spacing(4),\n      paddingBottom: theme.spacing(4)\n    },\n    paper: {\n      padding: theme.spacing(2),\n      display: \"flex\",\n      overflow: \"auto\",\n      flexDirection: \"column\"\n    }\n  });\n\nexport interface MainStateProps {\n  report?: Report;\n  isChartOpen: boolean;\n}\n\nconst MainComponent: React.FC<MainStateProps & WithStyles<typeof styles>> = ({\n  report,\n  isChartOpen,\n  classes\n}) => {\n  const renderPortfolio = () => {\n    if (!report) {\n      return null;\n    }\n\n    return (\n      <>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={4}>\n                <PortfolioSummary />\n              </Grid>\n              <Grid item xs={12} md={4}>\n                <Filters />\n              </Grid>\n            </Grid>\n          </Paper>\n        </Grid>\n        <Grid item xs={12}>\n          <Paper className={classes.paper} >\n            <SwitcherComponent activeKey={isChartOpen ? 'chart' : 'table'}>\n              <SwitcherItemComponent switcherKey=\"table\">\n                <PortfolioTableComponent report={report} />\n              </SwitcherItemComponent>\n              <SwitcherItemComponent switcherKey=\"chart\">\n                {isChartOpen ? <ChartPage /> : null}\n              </SwitcherItemComponent>\n            </SwitcherComponent>\n          </Paper>\n        </Grid>\n      </>\n    );\n  };\n\n  return (\n    <main className={classes.content}>\n      <div className={classes.appBarSpacer} />\n      <Container maxWidth=\"lg\" className={classes.container}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <Paper className={classes.paper}>\n              <ImportHistory />\n            </Paper>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Paper className={classes.paper}>\n              <Import />\n            </Paper>\n          </Grid>\n          {renderPortfolio()}\n        </Grid>\n      </Container>\n    </main>\n  );\n};\n\nexport default withStyles(styles)(MainComponent);\n","import { connect } from \"react-redux\";\nimport { AppState } from \"./store\";\nimport { filteredPortfolioSelector, isChartOpenSelector } from './portfolio/portfolio.selector';\nimport MainComponent, {MainStateProps} from \"./Main.component\";\n\nconst mapStateToProps = (state: AppState): MainStateProps => ({\n    report: filteredPortfolioSelector(state),\n    isChartOpen: isChartOpenSelector(state)\n})\n\nexport default connect<MainStateProps, {}, {}, AppState>(\n    mapStateToProps\n)(MainComponent);","import React from \"react\";\nimport \"./App.scss\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport HeaderComponent from \"./Header.component\";\nimport AppThemeComponent from \"./AppTheme.component\";\nimport Main from \"./Main.container\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\nconst App: React.FC = () => (\n  <AppThemeComponent>\n    <Provider store={store}>\n      <div className=\"app\">\n        <CssBaseline />\n        <HeaderComponent />\n        <Main />\n      </div>\n    </Provider>\n  </AppThemeComponent>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}